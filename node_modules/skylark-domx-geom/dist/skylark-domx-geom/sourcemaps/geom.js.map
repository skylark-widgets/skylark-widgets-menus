{"version":3,"sources":["geom.js"],"names":["define","skylark","langx","noder","styler","cachedScrollbarWidth","rootNodeRE","px","toPixel","offsetParent","scrollbarWidth","undefined","w1","w2","div","createFragment","innerDiv","childNodes","append","document","body","offsetWidth","css","clientWidth","remove","borderExtents","elm","isWindow","left","top","right","bottom","s","getComputedStyle","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","boundingPosition","coords","test","nodeName","getBoundingClientRect","parent","parentOffset","mex","marginExtents","pbex","relativePosition","this","boundingRect","size","window","documentElement","innerHeight","innerWidth","height","width","clientSize","dimension","clientHeight","isBorderBox","props","bex","pex","paddingExtents","getDocumentSize","doc","max","Math","scrollWidth","scrollHeight","offsetHeight","marginLeft","marginTop","marginRight","marginBottom","marginSize","obj","me","paddingLeft","paddingTop","paddingRight","paddingBottom","pagePosition","w","ownerDocument","defaultView","pageXOffset","pageYOffset","offset","relativeRect","scrollLeft","value","nodeType","hasScrollLeft","scrollTo","scrollY","scrollTop","hasScrollTop","scrollX","isDocument","geom","mixin","contentRect","cs","marginRect","pageRect","round","scrollIntoView","align","x","y","parentWidth","parentHeight","parentElm","parentNode","pos","rootElm","offsetLeft","offsetTop","getOffset","scrollBy","testAxis","result","abs","rhorizontal","rvertical","roffset","rposition","rpercent","getOffsets","offsets","parseFloat","parseCss","element","property","parseInt","positions","fit","position","data","newOverRight","within","withinOffset","outerWidth","collisionPosLeft","collisionPosition","overLeft","overRight","collisionWidth","newOverBottom","outerHeight","collisionPosTop","overTop","overBottom","collisionHeight","flip","newOverLeft","myOffset","my","elemWidth","atOffset","at","targetWidth","newOverTop","elemHeight","targetHeight","flipfit","apply","arguments","posit","options","targetOffset","basePosition","dimensions","withinElement","hasOffset","msize","raw","target","extend","of","scrollInfo","overflowX","overflowY","hasOverflowX","getScrollInfo","collision","split","preventDefault","pageY","pageX","each","horizontalOffset","verticalOffset","length","concat","exec","elem","using","i","dir","feedback","horizontal","vertical","important","call","attach"],"mappings":"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","file":"../geom.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-styler\"\r\n], function(skylark, langx, noder, styler) {\r\n    var rootNodeRE = /^(?:body|html)$/i,\r\n        px = langx.toPixel,\r\n        offsetParent = noder.offsetParent,\r\n        cachedScrollbarWidth;\r\n\r\n    function scrollbarWidth() {\r\n        if (cachedScrollbarWidth !== undefined) {\r\n            return cachedScrollbarWidth;\r\n        }\r\n        var w1, w2,\r\n            div = noder.createFragment(\"<div style=\" +\r\n                \"'display:block;position:absolute;width:200px;height:200px;overflow:hidden;'>\" +\r\n                \"<div style='height:300px;width:auto;'></div></div>\")[0],\r\n            innerDiv = div.childNodes[0];\r\n\r\n        noder.append(document.body, div);\r\n\r\n        w1 = innerDiv.offsetWidth;\r\n\r\n        styler.css(div, \"overflow\", \"scroll\");\r\n\r\n        w2 = innerDiv.offsetWidth;\r\n\r\n        if (w1 === w2) {\r\n            w2 = div[0].clientWidth;\r\n        }\r\n\r\n        noder.remove(div);\r\n\r\n        return (cachedScrollbarWidth = w1 - w2);\r\n    }\r\n\r\n    \r\n    /*\r\n     * Get the widths of each border of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function borderExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.borderLeftWidth, elm),\r\n            top: px(s.borderTopWidth, elm),\r\n            right: px(s.borderRightWidth, elm),\r\n            bottom: px(s.borderBottomWidth, elm)\r\n        }\r\n    }\r\n\r\n    //viewport coordinate\r\n    /*\r\n     * Get or set the viewport position of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function boundingPosition(elm, coords) {\r\n        if (coords === undefined) {\r\n            return rootNodeRE.test(elm.nodeName) ? { top: 0, left: 0 } : elm.getBoundingClientRect();\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            relativePosition(elm, {\r\n                top: coords.top - parentOffset.top - mex.top - pbex.top,\r\n                left: coords.left - parentOffset.left - mex.left - pbex.left\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the viewport rect of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function boundingRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            if (elm == window || elm == document.documentElement || elm == document.body){\r\n                return {\r\n                    top : 0,\r\n                    left : 0,\r\n                    bottom : window.innerHeight,\r\n                    right : window.innerWidth,\r\n                    height : window.innerHeight,\r\n                    width : window.innerWidth\r\n                };\r\n            } else if (elm.getBoundingClientRect) {\r\n                return elm.getBoundingClientRect();\r\n            }\r\n        } else {\r\n            boundingPosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the height of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function clientHeight(elm, value) {\r\n        if (value == undefined) {\r\n            return clientSize(elm).height;\r\n        } else {\r\n            return clientSize(elm, {\r\n                height: value\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the size of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} dimension\r\n     */\r\n    function clientSize(elm, dimension) {\r\n        if (dimension == undefined) {\r\n            return {\r\n                width: elm.clientWidth,\r\n                height: elm.clientHeight\r\n            }\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (!isBorderBox) {\r\n                var pex = paddingExtents(elm);\r\n\r\n                if (props.width !== undefined) {\r\n                    props.width = props.width - pex.left - pex.right;\r\n                }\r\n\r\n                if (props.height !== undefined) {\r\n                    props.height = props.height - pex.top - pex.bottom;\r\n                }\r\n            } else {\r\n                var bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined) {\r\n                    props.width = props.width + bex.left + bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined) {\r\n                    props.height = props.height + bex.top + bex.bottom;\r\n                }\r\n\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n        return {\r\n            width: elm.clientWidth,\r\n            height: elm.clientHeight\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get or set the width of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} dimension\r\n     */\r\n    function clientWidth(elm, value) {\r\n        if (value == undefined) {\r\n            return clientSize(elm).width;\r\n        } else {\r\n            clientSize(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get the rect of the specified element content box.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contentRect(elm) {\r\n        var cs = clientSize(elm),\r\n            pex = paddingExtents(elm);\r\n\r\n\r\n        //// On Opera, offsetLeft includes the parent's border\r\n        //if(has(\"opera\")){\r\n        //    pe.l += be.l;\r\n        //    pe.t += be.t;\r\n        //}\r\n        return {\r\n            left: pex.left,\r\n            top: pex.top,\r\n            width: cs.width - pex.left - pex.right,\r\n            height: cs.height - pex.top - pex.bottom\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the document size.\r\n     * @param {HTMLDocument} doc\r\n     */\r\n    function getDocumentSize(doc) {\r\n        var documentElement = doc.documentElement,\r\n            body = doc.body,\r\n            max = Math.max,\r\n            scrollWidth = max(documentElement.scrollWidth, body.scrollWidth),\r\n            clientWidth = max(documentElement.clientWidth, body.clientWidth),\r\n            offsetWidth = max(documentElement.offsetWidth, body.offsetWidth),\r\n            scrollHeight = max(documentElement.scrollHeight, body.scrollHeight),\r\n            clientHeight = max(documentElement.clientHeight, body.clientHeight),\r\n            offsetHeight = max(documentElement.offsetHeight, body.offsetHeight);\r\n\r\n        return {\r\n            width: scrollWidth < offsetWidth ? clientWidth : scrollWidth,\r\n            height: scrollHeight < offsetHeight ? clientHeight : scrollHeight\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the document size.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function height(elm, value) {\r\n        if (value == undefined) {\r\n            return size(elm).height;\r\n        } else {\r\n            size(elm, {\r\n                height: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get the widths of each margin of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function marginExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }\r\n        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.marginLeft),\r\n            top: px(s.marginTop),\r\n            right: px(s.marginRight),\r\n            bottom: px(s.marginBottom),\r\n        }\r\n    }\r\n\r\n\r\n    function marginRect(elm) {\r\n        var obj = relativeRect(elm),\r\n            me = marginExtents(elm);\r\n\r\n        return {\r\n            left: obj.left,\r\n            top: obj.top,\r\n            width: obj.width + me.left + me.right,\r\n            height: obj.height + me.top + me.bottom\r\n        };\r\n    }\r\n\r\n\r\n    function marginSize(elm) {\r\n        var obj = size(elm),\r\n            me = marginExtents(elm);\r\n\r\n        return {\r\n            width: obj.width + me.left + me.right,\r\n            height: obj.height + me.top + me.bottom\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the widths of each padding of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function paddingExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }\r\n        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.paddingLeft),\r\n            top: px(s.paddingTop),\r\n            right: px(s.paddingRight),\r\n            bottom: px(s.paddingBottom),\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the document position of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    //coordinate to the document\r\n    function pagePosition(elm, coords) {\r\n        if (coords === undefined) {\r\n            var obj = elm.getBoundingClientRect(),\r\n                w = elm.ownerDocument.defaultView;\r\n            return {\r\n                left: obj.left + w.pageXOffset,\r\n                top: obj.top + w.pageYOffset\r\n            }\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                parentOffset = pagePosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            relativePosition(elm, {\r\n                top: coords.top - parentOffset.top - mex.top - pbex.top,\r\n                left: coords.left - parentOffset.left - mex.left - pbex.left\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the document rect of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function pageRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            var obj = elm.getBoundingClientRect(),\r\n                w = elm.ownerDocument.defaultView;\r\n            return {\r\n                left: obj.left + w.pageXOffset,\r\n                top: obj.top + w.pageYOffset,\r\n                width: Math.round(obj.width),\r\n                height: Math.round(obj.height)\r\n            }\r\n        } else {\r\n            pagePosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the position of the specified element border box , relative to parent element.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    // coordinate relative to it's parent\r\n    function relativePosition(elm, coords) {\r\n        if (coords == undefined) {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                offset = boundingPosition(elm),\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            // Subtract parent offsets and element margins\r\n            return {\r\n                top: offset.top - parentOffset.top - pbex.top - mex.top,\r\n                left: offset.left - parentOffset.left - pbex.left - mex.left\r\n            }\r\n        } else {\r\n            var props = {\r\n                top: coords.top,\r\n                left: coords.left\r\n            }\r\n\r\n            if (styler.css(elm, \"position\") == \"static\") {\r\n                props['position'] = \"relative\";\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the rect of the specified element border box , relatived to parent element.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function relativeRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                offset = boundingRect(elm),\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            // Subtract parent offsets and element margins\r\n            return {\r\n                top: offset.top - parentOffset.top - pbex.top, // - mex.top,\r\n                left: offset.left - parentOffset.left - pbex.left, // - mex.left,\r\n                width: offset.width,\r\n                height: offset.height\r\n            }\r\n        } else {\r\n            relativePosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Scroll the specified element into view.\r\n     * @param {HTMLElement} elm\r\n     * @param {} align\r\n     */\r\n    function scrollIntoView(elm, align) {\r\n        function getOffset(elm, rootElm) {\r\n            var x, y, parent = elm;\r\n\r\n            x = y = 0;\r\n            while (parent && parent != rootElm && parent.nodeType) {\r\n                x += parent.offsetLeft || 0;\r\n                y += parent.offsetTop || 0;\r\n                parent = parent.offsetParent;\r\n            }\r\n\r\n            return { x: x, y: y };\r\n        }\r\n\r\n        var parentElm = elm.parentNode;\r\n        var x, y, width, height, parentWidth, parentHeight;\r\n        var pos = getOffset(elm, parentElm);\r\n\r\n        x = pos.x;\r\n        y = pos.y;\r\n        width = elm.offsetWidth;\r\n        height = elm.offsetHeight;\r\n        parentWidth = parentElm.clientWidth;\r\n        parentHeight = parentElm.clientHeight;\r\n\r\n        if (align == \"end\") {\r\n            x -= parentWidth - width;\r\n            y -= parentHeight - height;\r\n        } else if (align == \"center\") {\r\n            x -= (parentWidth / 2) - (width / 2);\r\n            y -= (parentHeight / 2) - (height / 2);\r\n        }\r\n\r\n        parentElm.scrollLeft = x;\r\n        parentElm.scrollTop = y;\r\n\r\n        return this;\r\n    }\r\n    /*\r\n     * Get or set the current horizontal position of the scroll bar for the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function scrollLeft(elm, value) {\r\n        if (elm.nodeType === 9) {\r\n            elm = elm.defaultView;\r\n        }\r\n        var hasScrollLeft = \"scrollLeft\" in elm;\r\n        if (value === undefined) {\r\n            return hasScrollLeft ? elm.scrollLeft : elm.pageXOffset\r\n        } else {\r\n            if (hasScrollLeft) {\r\n                elm.scrollLeft = value;\r\n            } else {\r\n                elm.scrollTo(value, elm.scrollY);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Get or the current vertical position of the scroll bar for the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function scrollTop(elm, value) {\r\n        if (elm.nodeType === 9) {\r\n            elm = elm.defaultView;\r\n        }\r\n        var hasScrollTop = \"scrollTop\" in elm;\r\n\r\n        if (value === undefined) {\r\n            return hasScrollTop ? elm.scrollTop : elm.pageYOffset\r\n        } else {\r\n            if (hasScrollTop) {\r\n                elm.scrollTop = value;\r\n            } else {\r\n                elm.scrollTo(elm.scrollX, value);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function scrollBy(elm, x, y) {\r\n        elm.scrollLeft += x;\r\n        elm.scrollTop += y;\r\n    }\r\n\r\n\r\n    /*\r\n     * Get or set the size of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject}dimension\r\n     */\r\n    function size(elm, dimension) {\r\n        if (dimension == undefined) {\r\n            if (langx.isWindow(elm)) {\r\n                return {\r\n                    width: elm.innerWidth,\r\n                    height: elm.innerHeight\r\n                }\r\n\r\n            } else if (langx.isDocument(elm)) {\r\n                return getDocumentSize(document);\r\n            } else {\r\n                return {\r\n                    width: elm.offsetWidth,\r\n                    height: elm.offsetHeight\r\n                }\r\n            }\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (!isBorderBox) {\r\n                var pex = paddingExtents(elm),\r\n                    bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined && props.width !== \"\" && props.width !== null) {\r\n                    props.width = props.width - pex.left - pex.right - bex.left - bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined && props.height !== \"\" && props.height !== null) {\r\n                    props.height = props.height - pex.top - pex.bottom - bex.top - bex.bottom;\r\n                }\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Get or set the size of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function width(elm, value) {\r\n        if (value == undefined) {\r\n            return size(elm).width;\r\n        } else {\r\n            size(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function testAxis(elm) {\r\n       \r\n        var top = elm.offsetTop;\r\n        var left = elm.offsetLeft;\r\n        var width = elm.offsetWidth;\r\n        var height = elm.offsetHeight;\r\n\r\n        while(elm.offsetParent) {\r\n            elm = elm.offsetParent;\r\n            top += elm.offsetTop;\r\n            left += elm.offsetLeft;\r\n        }\r\n\r\n        var result = {x: 0, y: 0};\r\n\r\n        //Over the top of the window\r\n        if(top < window.pageYOffset) {\r\n            result.y = top - window.pageYOffset;\r\n        }\r\n        //Bellow the window\r\n        else if((top + height) > (window.pageYOffset + window.innerHeight))\r\n        {\r\n            result.y = (top + height) - (window.pageYOffset + window.innerHeight);\r\n        }\r\n\r\n        //Left to the window\r\n        if(left < window.pageXOffset) {\r\n            result.x = left - window.pageXOffset;\r\n        }\r\n        //Right to the window\r\n        else if((left + width) > (window.pageXOffset + window.innerWidth))\r\n        {\r\n            result.x = (left + width) - (window.pageXOffset + window.innerWidth);\r\n        }\r\n\r\n        return result;\r\n    };    \r\n\r\n    function geom() {\r\n        return geom;\r\n    }\r\n\r\n    langx.mixin(geom, {\r\n        borderExtents: borderExtents,\r\n        //viewport coordinate\r\n        boundingPosition: boundingPosition,\r\n\r\n        boundingRect: boundingRect,\r\n\r\n        clientHeight: clientHeight,\r\n\r\n        clientSize: clientSize,\r\n\r\n        clientWidth: clientWidth,\r\n\r\n        contentRect: contentRect,\r\n\r\n        getDocumentSize: getDocumentSize,\r\n\r\n        height: height,\r\n\r\n        marginExtents: marginExtents,\r\n\r\n        marginRect: marginRect,\r\n\r\n        marginSize: marginSize,\r\n\r\n        offsetParent: offsetParent,\r\n\r\n        paddingExtents: paddingExtents,\r\n\r\n        //coordinate to the document\r\n        pagePosition: pagePosition,\r\n\r\n        pageRect: pageRect,\r\n\r\n        // coordinate relative to it's parent\r\n        relativePosition: relativePosition,\r\n\r\n        relativeRect: relativeRect,\r\n\r\n        scrollbarWidth: scrollbarWidth,\r\n\r\n        scrollIntoView: scrollIntoView,\r\n\r\n        scrollLeft: scrollLeft,\r\n\r\n        scrollTop: scrollTop,\r\n\r\n        scrollBy,\r\n            \r\n        size: size,\r\n\r\n        testAxis,\r\n\r\n        width: width\r\n    });\r\n\r\n    ( function() {\r\n        var max = Math.max,\r\n            abs = Math.abs,\r\n            rhorizontal = /left|center|right/,\r\n            rvertical = /top|center|bottom/,\r\n            roffset = /[\\+\\-]\\d+(\\.[\\d]+)?%?/,\r\n            rposition = /^\\w+/,\r\n            rpercent = /%$/;\r\n\r\n        function getOffsets( offsets, width, height ) {\r\n            return [\r\n                parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),\r\n                parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )\r\n            ];\r\n        }\r\n\r\n        function parseCss( element, property ) {\r\n            return parseInt( styler.css( element, property ), 10 ) || 0;\r\n        }\r\n\r\n        function getDimensions( raw ) {\r\n            if ( raw.nodeType === 9 ) {\r\n                return {\r\n                    size: size(raw),\r\n                    offset: { top: 0, left: 0 }\r\n                };\r\n            }\r\n            if ( noder.isWindow( raw ) ) {\r\n                return {\r\n                    size: size(raw),\r\n                    offset: { \r\n                        top: scrollTop(raw), \r\n                        left: scrollLeft(raw) \r\n                    }\r\n                };\r\n            }\r\n            if ( raw.preventDefault ) {\r\n                return {\r\n                    size : {\r\n                        width: 0,\r\n                        height: 0\r\n                    },\r\n                    offset: { \r\n                        top: raw.pageY, \r\n                        left: raw.pageX \r\n                    }\r\n                };\r\n            }\r\n            return {\r\n                size: size(raw),\r\n                offset: pagePosition(raw)\r\n            };\r\n        }\r\n\r\n        function getScrollInfo( within ) {\r\n            var overflowX = within.isWindow || within.isDocument ? \"\" :\r\n                    styler.css(within.element,\"overflow-x\" ),\r\n                overflowY = within.isWindow || within.isDocument ? \"\" :\r\n                    styler.css(within.element,\"overflow-y\" ),\r\n                hasOverflowX = overflowX === \"scroll\" ||\r\n                    ( overflowX === \"auto\" && within.width < scrollWidth(within.element) ),\r\n                hasOverflowY = overflowY === \"scroll\" ||\r\n                    ( overflowY === \"auto\" && within.height < scrollHeight(within.element));\r\n            return {\r\n                width: hasOverflowY ? scrollbarWidth() : 0,\r\n                height: hasOverflowX ? scrollbarWidth() : 0\r\n            };\r\n        }\r\n\r\n        function getWithinInfo( element ) {\r\n            var withinElement = element || window,\r\n                isWindow = noder.isWindow( withinElement),\r\n                isDocument = !!withinElement && withinElement.nodeType === 9,\r\n                hasOffset = !isWindow && !isDocument,\r\n                msize = marginSize(withinElement);\r\n            return {\r\n                element: withinElement,\r\n                isWindow: isWindow,\r\n                isDocument: isDocument,\r\n                offset: hasOffset ? pagePosition(element) : { left: 0, top: 0 },\r\n                scrollLeft: scrollLeft(withinElement),\r\n                scrollTop: scrollTop(withinElement),\r\n                width: msize.width,\r\n                height: msize.height\r\n            };\r\n        }\r\n\r\n        function posit(elm,options ) {\r\n            // Make a copy, we don't want to modify arguments\r\n            options = langx.extend( {}, options );\r\n\r\n            var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,\r\n                target = options.of,\r\n                within = getWithinInfo( options.within ),\r\n                scrollInfo = getScrollInfo( within ),\r\n                collision = ( options.collision || \"flip\" ).split( \" \" ),\r\n                offsets = {};\r\n\r\n            dimensions = getDimensions( target );\r\n            if ( target.preventDefault ) {\r\n\r\n                // Force left top to allow flipping\r\n                options.at = \"left top\";\r\n            }\r\n            targetWidth = dimensions.size.width;\r\n            targetHeight = dimensions.size.height;\r\n            targetOffset = dimensions.offset;\r\n\r\n            // Clone to reuse original targetOffset later\r\n            basePosition = langx.extend( {}, targetOffset );\r\n\r\n            // Force my and at to have valid horizontal and vertical positions\r\n            // if a value is missing or invalid, it will be converted to center\r\n            langx.each( [ \"my\", \"at\" ], function() {\r\n                var pos = ( options[ this ] || \"\" ).split( \" \" ),\r\n                    horizontalOffset,\r\n                    verticalOffset;\r\n\r\n                if ( pos.length === 1 ) {\r\n                    pos = rhorizontal.test( pos[ 0 ] ) ?\r\n                        pos.concat( [ \"center\" ] ) :\r\n                        rvertical.test( pos[ 0 ] ) ?\r\n                            [ \"center\" ].concat( pos ) :\r\n                            [ \"center\", \"center\" ];\r\n                }\r\n                pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : \"center\";\r\n                pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : \"center\";\r\n\r\n                // Calculate offsets\r\n                horizontalOffset = roffset.exec( pos[ 0 ] );\r\n                verticalOffset = roffset.exec( pos[ 1 ] );\r\n                offsets[ this ] = [\r\n                    horizontalOffset ? horizontalOffset[ 0 ] : 0,\r\n                    verticalOffset ? verticalOffset[ 0 ] : 0\r\n                ];\r\n\r\n                // Reduce to just the positions without the offsets\r\n                options[ this ] = [\r\n                    rposition.exec( pos[ 0 ] )[ 0 ],\r\n                    rposition.exec( pos[ 1 ] )[ 0 ]\r\n                ];\r\n            } );\r\n\r\n            // Normalize collision option\r\n            if ( collision.length === 1 ) {\r\n                collision[ 1 ] = collision[ 0 ];\r\n            }\r\n\r\n            if ( options.at[ 0 ] === \"right\" ) {\r\n                basePosition.left += targetWidth;\r\n            } else if ( options.at[ 0 ] === \"center\" ) {\r\n                basePosition.left += targetWidth / 2;\r\n            }\r\n\r\n            if ( options.at[ 1 ] === \"bottom\" ) {\r\n                basePosition.top += targetHeight;\r\n            } else if ( options.at[ 1 ] === \"center\" ) {\r\n                basePosition.top += targetHeight / 2;\r\n            }\r\n\r\n            atOffset = getOffsets( offsets.at, targetWidth, targetHeight );\r\n            basePosition.left += atOffset[ 0 ];\r\n            basePosition.top += atOffset[ 1 ];\r\n\r\n            return ( function(elem) {\r\n                var collisionPosition, using,\r\n                    msize = marginSize(elem),\r\n                    elemWidth = msize.width,\r\n                    elemHeight = msize.height,\r\n                    marginLeft = parseCss( elem, \"marginLeft\" ),\r\n                    marginTop = parseCss( elem, \"marginTop\" ),\r\n                    collisionWidth = elemWidth + marginLeft + parseCss( elem, \"marginRight\" ) +\r\n                        scrollInfo.width,\r\n                    collisionHeight = elemHeight + marginTop + parseCss( elem, \"marginBottom\" ) +\r\n                        scrollInfo.height,\r\n                    position = langx.extend( {}, basePosition ),\r\n                    myOffset = getOffsets( offsets.my, msize.width, msize.height);\r\n\r\n                if ( options.my[ 0 ] === \"right\" ) {\r\n                    position.left -= elemWidth;\r\n                } else if ( options.my[ 0 ] === \"center\" ) {\r\n                    position.left -= elemWidth / 2;\r\n                }\r\n\r\n                if ( options.my[ 1 ] === \"bottom\" ) {\r\n                    position.top -= elemHeight;\r\n                } else if ( options.my[ 1 ] === \"center\" ) {\r\n                    position.top -= elemHeight / 2;\r\n                }\r\n\r\n                position.left += myOffset[ 0 ];\r\n                position.top += myOffset[ 1 ];\r\n\r\n                collisionPosition = {\r\n                    marginLeft: marginLeft,\r\n                    marginTop: marginTop\r\n                };\r\n\r\n                langx.each( [ \"left\", \"top\" ], function( i, dir ) {\r\n                    if ( positions[ collision[ i ] ] ) {\r\n                        positions[ collision[ i ] ][ dir ]( position, {\r\n                            targetWidth: targetWidth,\r\n                            targetHeight: targetHeight,\r\n                            elemWidth: elemWidth,\r\n                            elemHeight: elemHeight,\r\n                            collisionPosition: collisionPosition,\r\n                            collisionWidth: collisionWidth,\r\n                            collisionHeight: collisionHeight,\r\n                            offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],\r\n                            my: options.my,\r\n                            at: options.at,\r\n                            within: within,\r\n                            elem: elem\r\n                        } );\r\n                    }\r\n                } );\r\n\r\n                if ( options.using ) {\r\n\r\n                    // Adds feedback as second argument to using callback, if present\r\n                    using = function( props ) {\r\n                        var left = targetOffset.left - position.left,\r\n                            right = left + targetWidth - elemWidth,\r\n                            top = targetOffset.top - position.top,\r\n                            bottom = top + targetHeight - elemHeight,\r\n                            feedback = {\r\n                                target: {\r\n                                    element: target,\r\n                                    left: targetOffset.left,\r\n                                    top: targetOffset.top,\r\n                                    width: targetWidth,\r\n                                    height: targetHeight\r\n                                },\r\n                                element: {\r\n                                    element: elem,\r\n                                    left: position.left,\r\n                                    top: position.top,\r\n                                    width: elemWidth,\r\n                                    height: elemHeight\r\n                                },\r\n                                horizontal: right < 0 ? \"left\" : left > 0 ? \"right\" : \"center\",\r\n                                vertical: bottom < 0 ? \"top\" : top > 0 ? \"bottom\" : \"middle\"\r\n                            };\r\n                        if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {\r\n                            feedback.horizontal = \"center\";\r\n                        }\r\n                        if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {\r\n                            feedback.vertical = \"middle\";\r\n                        }\r\n                        if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {\r\n                            feedback.important = \"horizontal\";\r\n                        } else {\r\n                            feedback.important = \"vertical\";\r\n                        }\r\n                        options.using.call( this, props, feedback );\r\n                    };\r\n                }\r\n\r\n                pagePosition(elem, langx.extend( position, { using: using } ));\r\n            })(elm);\r\n        }\r\n\r\n        var positions = {\r\n            fit: {\r\n                left: function( position, data ) {\r\n                    var within = data.within,\r\n                        withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,\r\n                        outerWidth = within.width,\r\n                        collisionPosLeft = position.left - data.collisionPosition.marginLeft,\r\n                        overLeft = withinOffset - collisionPosLeft,\r\n                        overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,\r\n                        newOverRight;\r\n\r\n                    // Element is wider than within\r\n                    if ( data.collisionWidth > outerWidth ) {\r\n\r\n                        // Element is initially over the left side of within\r\n                        if ( overLeft > 0 && overRight <= 0 ) {\r\n                            newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -\r\n                                withinOffset;\r\n                            position.left += overLeft - newOverRight;\r\n\r\n                        // Element is initially over right side of within\r\n                        } else if ( overRight > 0 && overLeft <= 0 ) {\r\n                            position.left = withinOffset;\r\n\r\n                        // Element is initially over both left and right sides of within\r\n                        } else {\r\n                            if ( overLeft > overRight ) {\r\n                                position.left = withinOffset + outerWidth - data.collisionWidth;\r\n                            } else {\r\n                                position.left = withinOffset;\r\n                            }\r\n                        }\r\n\r\n                    // Too far left -> align with left edge\r\n                    } else if ( overLeft > 0 ) {\r\n                        position.left += overLeft;\r\n\r\n                    // Too far right -> align with right edge\r\n                    } else if ( overRight > 0 ) {\r\n                        position.left -= overRight;\r\n\r\n                    // Adjust based on position and margin\r\n                    } else {\r\n                        position.left = max( position.left - collisionPosLeft, position.left );\r\n                    }\r\n                },\r\n                top: function( position, data ) {\r\n                    var within = data.within,\r\n                        withinOffset = within.isWindow ? within.scrollTop : within.offset.top,\r\n                        outerHeight = data.within.height,\r\n                        collisionPosTop = position.top - data.collisionPosition.marginTop,\r\n                        overTop = withinOffset - collisionPosTop,\r\n                        overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,\r\n                        newOverBottom;\r\n\r\n                    // Element is taller than within\r\n                    if ( data.collisionHeight > outerHeight ) {\r\n\r\n                        // Element is initially over the top of within\r\n                        if ( overTop > 0 && overBottom <= 0 ) {\r\n                            newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -\r\n                                withinOffset;\r\n                            position.top += overTop - newOverBottom;\r\n\r\n                        // Element is initially over bottom of within\r\n                        } else if ( overBottom > 0 && overTop <= 0 ) {\r\n                            position.top = withinOffset;\r\n\r\n                        // Element is initially over both top and bottom of within\r\n                        } else {\r\n                            if ( overTop > overBottom ) {\r\n                                position.top = withinOffset + outerHeight - data.collisionHeight;\r\n                            } else {\r\n                                position.top = withinOffset;\r\n                            }\r\n                        }\r\n\r\n                    // Too far up -> align with top\r\n                    } else if ( overTop > 0 ) {\r\n                        position.top += overTop;\r\n\r\n                    // Too far down -> align with bottom edge\r\n                    } else if ( overBottom > 0 ) {\r\n                        position.top -= overBottom;\r\n\r\n                    // Adjust based on position and margin\r\n                    } else {\r\n                        position.top = max( position.top - collisionPosTop, position.top );\r\n                    }\r\n                }\r\n            },\r\n            flip: {\r\n                left: function( position, data ) {\r\n                    var within = data.within,\r\n                        withinOffset = within.offset.left + within.scrollLeft,\r\n                        outerWidth = within.width,\r\n                        offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,\r\n                        collisionPosLeft = position.left - data.collisionPosition.marginLeft,\r\n                        overLeft = collisionPosLeft - offsetLeft,\r\n                        overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,\r\n                        myOffset = data.my[ 0 ] === \"left\" ?\r\n                            -data.elemWidth :\r\n                            data.my[ 0 ] === \"right\" ?\r\n                                data.elemWidth :\r\n                                0,\r\n                        atOffset = data.at[ 0 ] === \"left\" ?\r\n                            data.targetWidth :\r\n                            data.at[ 0 ] === \"right\" ?\r\n                                -data.targetWidth :\r\n                                0,\r\n                        offset = -2 * data.offset[ 0 ],\r\n                        newOverRight,\r\n                        newOverLeft;\r\n\r\n                    if ( overLeft < 0 ) {\r\n                        newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -\r\n                            outerWidth - withinOffset;\r\n                        if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {\r\n                            position.left += myOffset + atOffset + offset;\r\n                        }\r\n                    } else if ( overRight > 0 ) {\r\n                        newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +\r\n                            atOffset + offset - offsetLeft;\r\n                        if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {\r\n                            position.left += myOffset + atOffset + offset;\r\n                        }\r\n                    }\r\n                },\r\n                top: function( position, data ) {\r\n                    var within = data.within,\r\n                        withinOffset = within.offset.top + within.scrollTop,\r\n                        outerHeight = within.height,\r\n                        offsetTop = within.isWindow ? within.scrollTop : within.offset.top,\r\n                        collisionPosTop = position.top - data.collisionPosition.marginTop,\r\n                        overTop = collisionPosTop - offsetTop,\r\n                        overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,\r\n                        top = data.my[ 1 ] === \"top\",\r\n                        myOffset = top ?\r\n                            -data.elemHeight :\r\n                            data.my[ 1 ] === \"bottom\" ?\r\n                                data.elemHeight :\r\n                                0,\r\n                        atOffset = data.at[ 1 ] === \"top\" ?\r\n                            data.targetHeight :\r\n                            data.at[ 1 ] === \"bottom\" ?\r\n                                -data.targetHeight :\r\n                                0,\r\n                        offset = -2 * data.offset[ 1 ],\r\n                        newOverTop,\r\n                        newOverBottom;\r\n                    if ( overTop < 0 ) {\r\n                        newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -\r\n                            outerHeight - withinOffset;\r\n                        if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {\r\n                            position.top += myOffset + atOffset + offset;\r\n                        }\r\n                    } else if ( overBottom > 0 ) {\r\n                        newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +\r\n                            offset - offsetTop;\r\n                        if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {\r\n                            position.top += myOffset + atOffset + offset;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            flipfit: {\r\n                left: function() {\r\n                    positions.flip.left.apply( this, arguments );\r\n                    positions.fit.left.apply( this, arguments );\r\n                },\r\n                top: function() {\r\n                    positions.flip.top.apply( this, arguments );\r\n                    positions.fit.top.apply( this, arguments );\r\n                }\r\n            }\r\n        };\r\n\r\n        geom.posit = posit;\r\n    })();\r\n\r\n    return skylark.attach(\"domx.geom\", geom);\r\n});"]}