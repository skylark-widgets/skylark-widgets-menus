{"version":3,"sources":["skylark-langx-funcs.js"],"names":["define","skylark","types","objects","attach","noop","returnTrue","returnFalse","funcs","debounce","fn","wait","timeout","context","this","args","arguments","clearTimeout","setTimeout","apply","defer","requestAnimationFrame","setTimeoutout","mixin","delegate","TMP","obj","props","prototype","tmp","AnimationTimer","callback","running","id","start","self","run","stop","cancelAnimationFrame","loop","negate","predicate","TypeError","slice","Array","isFunction","isString","bind","proxy","call","concat","unshift","templateSettings","evaluate","interpolate","escape","noMatch","escapes","'","\\","\r","\n","\t"," "," ","escaper","template","text","data","settings","render","defaults","matcher","RegExp","source","join","index","replace","match","offset","length","variable","Function","e","argument","main"],"mappings":"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","file":"../skylark-langx-funcs.js","sourcesContent":["define('skylark-langx-funcs/funcs',[\r\n  \"skylark-langx-ns/ns\",\r\n],function(skylark,types,objects){\r\n        \r\n\r\n\r\n\r\n    function noop() {\r\n    }\r\n\r\n\r\n\r\n\r\n    return skylark.attach(\"langx.funcs\",{\r\n        noop : noop,\r\n\r\n        returnTrue: function() {\r\n            return true;\r\n        },\r\n\r\n        returnFalse: function() {\r\n            return false;\r\n        }\r\n\r\n    });\r\n});\ndefine('skylark-langx-funcs/debounce',[\r\n\t\"./funcs\"\r\n],function(funcs){\r\n   \r\n    function debounce(fn, wait) {\r\n        var timeout;\r\n        return function () {\r\n            var context = this, args = arguments;\r\n            var later = function () {\r\n                timeout = null;\r\n                fn.apply(context, args);\r\n            };\r\n            if (timeout) clearTimeout(timeout);\r\n            timeout = setTimeout(later, wait);\r\n        };\r\n    }\r\n\r\n    return funcs.debounce = debounce;\r\n\r\n});\ndefine('skylark-langx-funcs/defer',[\r\n\t\"./funcs\"\r\n],function(funcs){\r\n\tfunction defer(fn) {\r\n        if (requestAnimationFrame) {\r\n            requestAnimationFrame(fn);\r\n        } else {\r\n            setTimeoutout(fn);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    return funcs.defer = defer;\r\n});\ndefine('skylark-langx-funcs/delegate',[\r\n  \"skylark-langx-objects\",\r\n  \"./funcs\"\r\n],function(objects,funcs){\r\n\tvar mixin = objects.mixin;\r\n\r\n    var delegate = (function() {\r\n        // boodman/crockford delegation w/ cornford optimization\r\n        function TMP() {}\r\n        return function(obj, props) {\r\n            TMP.prototype = obj;\r\n            var tmp = new TMP();\r\n            TMP.prototype = null;\r\n            if (props) {\r\n                mixin(tmp, props);\r\n            }\r\n            return tmp; // Object\r\n        };\r\n    })();\r\n\r\n    return funcs.delegate = delegate;\r\n\r\n});\ndefine('skylark-langx-funcs/loop',[\r\n\t\"./funcs\"\r\n],function(funcs){\r\n\r\n\t/**\r\n\t * Animation timer is a special type of timer that uses the requestAnimationFrame method.\r\n\t *\r\n\t * This timer calls the method with the same rate as the screen refesh rate.\r\n\t * \r\n\t * Loop time can be changed dinamically.\r\n\t *\r\n\t * @class AnimationTimer\r\n\t * @param {Function} callback Timer callback function.\r\n\t */\r\n\tfunction AnimationTimer(callback)\r\n\t{\r\n\t\tthis.callback = callback;\r\n\r\n\t\tthis.running = false;\r\n\t\tthis.id = -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Start timer, is the timer is already running dosen't do anything.\r\n\t * \r\n\t * @method start\r\n\t */\r\n\tAnimationTimer.prototype.start = function()\r\n\t{\r\n\t\tif(this.running)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.running = true;\r\n\r\n\t\tvar self = this;\r\n\t\tfunction run()\r\n\t\t{\r\n\t\t\tself.callback();\r\n\r\n\t\t\tif(self.running)\r\n\t\t\t{\r\n\t\t\t\tself.id = requestAnimationFrame(run);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trun();\r\n\t};\r\n\r\n\t/**\r\n\t * Stop animation timer.\r\n\t * \r\n\t * @method stop\r\n\t */\r\n\tAnimationTimer.prototype.stop = function()\r\n\t{\r\n\t\tthis.running = false;\r\n\t\tcancelAnimationFrame(this.id);\r\n\t};\r\n\r\n\tfunction loop(fn) {\r\n\t\treturn new AnimationTimer(fn);\r\n    }\r\n\r\n    return funcs.loop = loop;\r\n});\ndefine('skylark-langx-funcs/negate',[\r\n\t\"./funcs\"\r\n],function(funcs){\r\n   \r\n    /**\r\n     * Creates a function that negates the result of the predicate `func`. The\r\n     * `func` predicate is invoked with the `this` binding and arguments of the\r\n     * created function.\r\n     * @category Function\r\n     * @param {Function} predicate The predicate to negate.\r\n     * @returns {Function} Returns the new negated function.\r\n     * @example\r\n     *\r\n     * function isEven(n) {\r\n     *   return n % 2 == 0\r\n     * }\r\n     *\r\n     * filter([1, 2, 3, 4, 5, 6], negate(isEven))\r\n     * // => [1, 3, 5]\r\n     */\r\n    function negate(predicate) {\r\n      if (typeof predicate !== 'function') {\r\n        throw new TypeError('Expected a function')\r\n      }\r\n      return function(...args) {\r\n        return !predicate.apply(this, args)\r\n      }\r\n    }\r\n\r\n\r\n    return funcs.negate = negate;\r\n\r\n});\ndefine('skylark-langx-funcs/proxy',[\r\n  \"skylark-langx-types\",\r\n\t\"./funcs\"\r\n],function(types,funcs){\r\n    var slice = Array.prototype.slice,\r\n        isFunction = types.isFunction,\r\n        isString = types.isString;\r\n\r\n    function proxy(fn, context) {\r\n        var args = (2 in arguments) && slice.call(arguments, 2)\r\n        if (isFunction(fn)) {\r\n            var proxyFn = function() {\r\n                return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments);\r\n            }\r\n            return proxyFn;\r\n        } else if (isString(context)) {\r\n            if (args) {\r\n                args.unshift(fn[context], fn)\r\n                return proxy.apply(null, args)\r\n            } else {\r\n                return proxy(fn[context], fn);\r\n            }\r\n        } else {\r\n            throw new TypeError(\"expected function\");\r\n        }\r\n    }\r\n\r\n    return funcs.bind = funcs.proxy = proxy;\r\n\r\n});\ndefine('skylark-langx-funcs/template',[\r\n\t\"./funcs\"\r\n],function(funcs){\r\n    var slice = Array.prototype.slice;\r\n\r\n   \r\n    // By default, Underscore uses ERB-style template delimiters, change the\r\n    // following template settings to use alternative delimiters.\r\n    var templateSettings = {\r\n        evaluate: /<%([\\s\\S]+?)%>/g,\r\n        interpolate: /<%=([\\s\\S]+?)%>/g,\r\n        escape: /<%-([\\s\\S]+?)%>/g\r\n    };\r\n\r\n    // When customizing `templateSettings`, if you don't want to define an\r\n    // interpolation, evaluation or escaping regex, we need one that is\r\n    // guaranteed not to match.\r\n    var noMatch = /(.)^/;\r\n\r\n\r\n    // Certain characters need to be escaped so that they can be put into a\r\n    // string literal.\r\n    var escapes = {\r\n      \"'\":      \"'\",\r\n      '\\\\':     '\\\\',\r\n      '\\r':     'r',\r\n      '\\n':     'n',\r\n      '\\t':     't',\r\n      '\\u2028': 'u2028',\r\n      '\\u2029': 'u2029'\r\n    };\r\n\r\n    var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\r\n\r\n\r\n    function template(text, data, settings) {\r\n        var render;\r\n        settings = objects.defaults({}, settings,templateSettings);\r\n\r\n        // Combine delimiters into one regular expression via alternation.\r\n        var matcher = RegExp([\r\n          (settings.escape || noMatch).source,\r\n          (settings.interpolate || noMatch).source,\r\n          (settings.evaluate || noMatch).source\r\n        ].join('|') + '|$', 'g');\r\n\r\n        // Compile the template source, escaping string literals appropriately.\r\n        var index = 0;\r\n        var source = \"__p+='\";\r\n        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\r\n          source += text.slice(index, offset)\r\n              .replace(escaper, function(match) { return '\\\\' + escapes[match]; });\r\n\r\n          if (escape) {\r\n            source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\r\n          }\r\n          if (interpolate) {\r\n            source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\r\n          }\r\n          if (evaluate) {\r\n            source += \"';\\n\" + evaluate + \"\\n__p+='\";\r\n          }\r\n          index = offset + match.length;\r\n          return match;\r\n        });\r\n        source += \"';\\n\";\r\n\r\n        // If a variable is not specified, place data values in local scope.\r\n        if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\r\n\r\n        source = \"var __t,__p='',__j=Array.prototype.join,\" +\r\n          \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\r\n          source + 'return __p;\\n';\r\n\r\n        try {\r\n          render = new Function(settings.variable || 'obj', '_', source);\r\n        } catch (e) {\r\n          e.source = source;\r\n          throw e;\r\n        }\r\n\r\n        if (data) {\r\n          return render(data,this)\r\n        }\r\n        var template = proxy(function(data) {\r\n          return render.call(this, data,this);\r\n        },this);\r\n\r\n        // Provide the compiled source as a convenience for precompilation.\r\n        var argument = settings.variable || 'obj';\r\n        template.source = 'function(' + argument + '){\\n' + source + '}';\r\n\r\n        return template;\r\n    }\r\n\r\n    template.templateSettings = funcs.templateSettings = templateSettings;\r\n\r\n    return funcs.template = template;\r\n\r\n});\ndefine('skylark-langx-funcs/main',[\r\n\t\"./funcs\",\r\n\t\"./debounce\",\r\n\t\"./defer\",\r\n\t\"./delegate\",\r\n\t\"./loop\",\r\n\t\"./negate\",\r\n\t\"./proxy\",\r\n\t\"./template\"\r\n],function(funcs){\r\n\treturn funcs;\r\n});\ndefine('skylark-langx-funcs', ['skylark-langx-funcs/main'], function (main) { return main; });\n\n"]}