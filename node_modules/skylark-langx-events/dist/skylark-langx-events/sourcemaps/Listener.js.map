{"version":3,"sources":["Listener.js"],"names":["define","types","objects","arrays","klass","events","Event","Array","prototype","slice","compact","isBoolean","isDefined","isPlainObject","isFunction","isString","isEmptyObject","Listener","mixin","safeMixin","listenTo","obj","event","callback","one","this","callbacks","name","on","listening","listeningTo","_listeningTo","i","length","push","listeningEvents","listeningEvent","indexOf","listenToOnce","unlistenTo","eventName","j","off"],"mappings":";;;;;;;AAAAA,QACE,sBACA,wBACA,uBACA,sBACA,WACA,WACA,SAASC,EAAMC,EAAQC,EAAOC,EAAMC,EAAOC,GAC7BC,MAAMC,UAAUC,MAA5B,IACIC,EAAUP,EAAOO,QAIjBC,GAHYV,EAAMW,UACFX,EAAMY,cACTZ,EAAMa,WACPb,EAAMU,WAClBI,EAAWd,EAAMc,SACjBC,EAAgBf,EAAMe,cAKtBC,GAJQf,EAAQgB,MACJhB,EAAQiB,UAGTf,GAEXgB,SAAU,SAASC,EAAKC,EAAOC,EAA8BC,GACzD,IAAKH,EACD,OAAOI,KAQX,GALId,EAAUY,KACVC,EAAMD,EACNA,EAAW,MAGXtB,EAAMY,cAAcS,GAAO,CAE3B,IAAII,EAAYJ,EAChB,IAAK,IAAIK,KAAQD,EACbD,KAAKL,SAASC,EAAIM,EAAKD,EAAUC,GAAMH,GAE3C,OAAOC,KAGNF,IACDA,EAAW,eAIXR,EAASQ,KACTA,EAAWE,KAAKF,IAGhBC,EACAH,EAAIG,IAAIF,EAAOC,EAAUE,MAEzBJ,EAAIO,GAAGN,EAAOC,EAAUE,MAO5B,IAHA,IACII,EADAC,EAAcL,KAAKM,eAAiBN,KAAKM,iBAGpCC,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IACpC,GAAIF,EAAYE,GAAGX,KAAOA,EAAK,CAC3BQ,EAAYC,EAAYE,GACxB,MAGHH,GACDC,EAAYI,KACRL,GACIR,IAAKA,EACLhB,YAIZ,IAAI8B,EAAkBN,EAAUxB,OAC5B+B,EAAiBD,EAAgBb,GAASa,EAAgBb,OAK9D,OAJyC,GAArCc,EAAeC,QAAQd,IACvBa,EAAeF,KAAKX,GAGjBE,MAGXa,aAAc,SAASjB,EAAKC,EAAOC,GAC/B,OAAOE,KAAKL,SAASC,EAAKC,EAAOC,EAAU,IAG/CgB,WAAY,SAASlB,EAAKC,EAAOC,GAC7B,IAAIO,EAAcL,KAAKM,aACvB,IAAKD,EACD,OAAOL,KAGPV,EAASQ,KACTA,EAAWE,KAAKF,IAGpB,IAAK,IAAIS,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IAAK,CACzC,IAAIH,EAAYC,EAAYE,GAE5B,IAAIX,GAAOA,GAAOQ,EAAUR,IAA5B,CAIA,IAAIc,EAAkBN,EAAUxB,OAChC,IAAK,IAAImC,KAAaL,EAClB,IAAIb,GAASA,GAASkB,EAAtB,CAMA,IAFA,IAAIJ,EAAiBD,EAAgBK,GAE5BC,EAAI,EAAGA,EAAIL,EAAeH,OAAQQ,IAClClB,GAAYA,GAAYa,EAAeJ,KACxCH,EAAUR,IAAIqB,IAAIF,EAAWJ,EAAeJ,GAAIP,MAChDW,EAAeJ,GAAK,MAI5BI,EAAiBD,EAAgBK,GAAa9B,EAAQ0B,GAElDpB,EAAcoB,KACdD,EAAgBK,GAAa,MAKjCxB,EAAcmB,KACdL,EAAYE,GAAK,OASzB,OALAF,EAAcL,KAAKM,aAAerB,EAAQoB,GACtCd,EAAcc,KACdL,KAAKM,aAAe,MAGjBN,SAIf,OAAOpB,EAAOY,SAAWA","file":"../Listener.js","sourcesContent":["define([\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-arrays\",\r\n  \"skylark-langx-klass\",\r\n  \"./events\",\r\n  \"./Event\"\r\n],function(types,objects,arrays,klass,events,Event){\r\n    var slice = Array.prototype.slice,\r\n        compact = arrays.compact,\r\n        isDefined = types.isDefined,\r\n        isPlainObject = types.isPlainObject,\r\n        isFunction = types.isFunction,\r\n        isBoolean = types.isBoolean,\r\n        isString = types.isString,\r\n        isEmptyObject = types.isEmptyObject,\r\n        mixin = objects.mixin,\r\n        safeMixin = objects.safeMixin;\r\n\r\n\r\n    var Listener = klass({\r\n\r\n        listenTo: function(obj, event, callback, /*used internally*/ one) {\r\n            if (!obj) {\r\n                return this;\r\n            }\r\n\r\n            if (isBoolean(callback)) {\r\n                one = callback;\r\n                callback = null;\r\n            }\r\n\r\n            if (types.isPlainObject(event)){\r\n                //listenTo(obj,callbacks,one)\r\n                var callbacks = event;\r\n                for (var name in callbacks) {\r\n                    this.listenTo(obj,name,callbacks[name],one);\r\n                }\r\n                return this;\r\n            }\r\n\r\n            if (!callback) {\r\n                callback = \"handleEvent\";\r\n            }\r\n            \r\n            // Bind callbacks on obj,\r\n            if (isString(callback)) {\r\n                callback = this[callback];\r\n            }\r\n\r\n            if (one) {\r\n                obj.one(event, callback, this);\r\n            } else {\r\n                obj.on(event, callback, this);\r\n            }\r\n\r\n            //keep track of them on listening.\r\n            var listeningTo = this._listeningTo || (this._listeningTo = []),\r\n                listening;\r\n\r\n            for (var i = 0; i < listeningTo.length; i++) {\r\n                if (listeningTo[i].obj == obj) {\r\n                    listening = listeningTo[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (!listening) {\r\n                listeningTo.push(\r\n                    listening = {\r\n                        obj: obj,\r\n                        events: {}\r\n                    }\r\n                );\r\n            }\r\n            var listeningEvents = listening.events,\r\n                listeningEvent = listeningEvents[event] = listeningEvents[event] || [];\r\n            if (listeningEvent.indexOf(callback) == -1) {\r\n                listeningEvent.push(callback);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        listenToOnce: function(obj, event, callback) {\r\n            return this.listenTo(obj, event, callback, 1);\r\n        },\r\n\r\n        unlistenTo: function(obj, event, callback) {\r\n            var listeningTo = this._listeningTo;\r\n            if (!listeningTo) {\r\n                return this;\r\n            }\r\n\r\n            if (isString(callback)) {\r\n                callback = this[callback];\r\n            }\r\n\r\n            for (var i = 0; i < listeningTo.length; i++) {\r\n                var listening = listeningTo[i];\r\n\r\n                if (obj && obj != listening.obj) {\r\n                    continue;\r\n                }\r\n\r\n                var listeningEvents = listening.events;\r\n                for (var eventName in listeningEvents) {\r\n                    if (event && event != eventName) {\r\n                        continue;\r\n                    }\r\n\r\n                    var listeningEvent = listeningEvents[eventName];\r\n\r\n                    for (var j = 0; j < listeningEvent.length; j++) {\r\n                        if (!callback || callback == listeningEvent[i]) {\r\n                            listening.obj.off(eventName, listeningEvent[i], this);\r\n                            listeningEvent[i] = null;\r\n                        }\r\n                    }\r\n\r\n                    listeningEvent = listeningEvents[eventName] = compact(listeningEvent);\r\n\r\n                    if (isEmptyObject(listeningEvent)) {\r\n                        listeningEvents[eventName] = null;\r\n                    }\r\n\r\n                }\r\n\r\n                if (isEmptyObject(listeningEvents)) {\r\n                    listeningTo[i] = null;\r\n                }\r\n            }\r\n\r\n            listeningTo = this._listeningTo = compact(listeningTo);\r\n            if (isEmptyObject(listeningTo)) {\r\n                this._listeningTo = null;\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n    return events.Listener = Listener;\r\n\r\n})"]}