{"version":3,"sources":["skylark-langx-objects.js"],"names":["define","skylark","types","keysFunc","defaults","hasOwnProperty","Object","prototype","slice","Array","isBoolean","isObject","isFunction","isPlainObject","isArray","isArrayLike","isString","toInteger","allKeys","obj","keys","key","push","has","path","call","length","i","_mixin","target","source","deep","safe","undefined","_parseMixinArgs","args","params","arguments","shift","pop","sources","mixin","apply","this","forEach","values","attach","clone","src","checkCloneMethod","copy","index","l","each","callback","isForEach","value","undef","extend","arg","includes","collection","fromIndex","guard","nativeMax","indexOf","baseIndexOf","isMatch","object","attrs","omit","prop1","prop2","result","pn","pick","removeItem","items","item","idx","splice","safeMixin","scall","method","arg1","arg2","objects","eq","deepEq","SymbolProto","Symbol","a","b","aStack","bStack","type","className","toString","valueOf","areArrays","aCtor","constructor","bCtor","isEqual","fallback","split","prop","main"],"mappings":"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","file":"../skylark-langx-objects.js","sourcesContent":["define('skylark-langx-objects/objects',[\r\n    \"skylark-langx-ns\",\r\n    \"skylark-langx-types\"\r\n],function(skylark,types){\r\n    var hasOwnProperty = Object.prototype.hasOwnProperty,\r\n        slice = Array.prototype.slice,\r\n        isBoolean = types.isBoolean,\r\n        isFunction = types.isFunction,\r\n        isObject = types.isObject,\r\n        isPlainObject = types.isPlainObject,\r\n        isArray = types.isArray,\r\n        isArrayLike = types.isArrayLike,\r\n        isString = types.isString,\r\n        toInteger = types.toInteger;\r\n\r\n     // An internal function for creating assigner functions.\r\n    function createAssigner(keysFunc, defaults) {\r\n        return function(obj) {\r\n          var length = arguments.length;\r\n          if (defaults) obj = Object(obj);  \r\n          if (length < 2 || obj == null) return obj;\r\n          for (var index = 1; index < length; index++) {\r\n            var source = arguments[index],\r\n                keys = keysFunc(source),\r\n                l = keys.length;\r\n            for (var i = 0; i < l; i++) {\r\n              var key = keys[i];\r\n              if (!defaults || obj[key] === void 0) obj[key] = source[key];\r\n            }\r\n          }\r\n          return obj;\r\n       };\r\n    }\r\n\r\n\r\n    // Retrieve all the property names of an object.\r\n    function allKeys(obj) {\r\n        if (!isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function each(obj, callback,isForEach) {\r\n        var length, key, i, undef, value;\r\n\r\n        if (obj) {\r\n            length = obj.length;\r\n\r\n            if (length === undef) {\r\n                // Loop object items\r\n                for (key in obj) {\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        value = obj[key];\r\n                        if ((isForEach ? callback.call(value, value, key) : callback.call(value, key, value) ) === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Loop array items\r\n                for (i = 0; i < length; i++) {\r\n                    value = obj[i];\r\n                    if ((isForEach ? callback.call(value, value, i) : callback.call(value, i, value) )=== false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function extend(target) {\r\n        var deep, args = slice.call(arguments, 1);\r\n        if (typeof target == 'boolean') {\r\n            deep = target\r\n            target = args.shift()\r\n        }\r\n        if (args.length == 0) {\r\n            args = [target];\r\n            target = this;\r\n        }\r\n        args.forEach(function(arg) {\r\n            mixin(target, arg, deep);\r\n        });\r\n        return target;\r\n    }\r\n\r\n    // Retrieve the names of an object's own properties.\r\n    // Delegates to **ECMAScript 5**'s native `Object.keys`.\r\n    function keys(obj) {\r\n        if (isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) if (has(obj, key)) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function has(obj, path) {\r\n        if (!isArray(path)) {\r\n            return obj != null && hasOwnProperty.call(obj, path);\r\n        }\r\n        var length = path.length;\r\n        for (var i = 0; i < length; i++) {\r\n            var key = path[i];\r\n            if (obj == null || !hasOwnProperty.call(obj, key)) {\r\n                return false;\r\n            }\r\n            obj = obj[key];\r\n        }\r\n        return !!length;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\r\n     * checked for a substring of `value`, otherwise\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\r\n     * the offset from the end of `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\r\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\r\n     * @example\r\n     *\r\n     * _.includes([1, 2, 3], 1);\r\n     * // => true\r\n     *\r\n     * _.includes([1, 2, 3], 1, 2);\r\n     * // => false\r\n     *\r\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\r\n     * // => true\r\n     *\r\n     * _.includes('abcd', 'bc');\r\n     * // => true\r\n     */\r\n    function includes(collection, value, fromIndex, guard) {\r\n      collection = isArrayLike(collection) ? collection : values(collection);\r\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\r\n\r\n      var length = collection.length;\r\n      if (fromIndex < 0) {\r\n        fromIndex = nativeMax(length + fromIndex, 0);\r\n      }\r\n      return isString(collection)\r\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\r\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\r\n    }\r\n\r\n\r\n    // Returns whether an object has a given set of `key:value` pairs.\r\n    function isMatch(object, attrs) {\r\n        var keys = keys(attrs), length = keys.length;\r\n        if (object == null) return !length;\r\n        var obj = Object(object);\r\n        for (var i = 0; i < length; i++) {\r\n          var key = keys[i];\r\n          if (attrs[key] !== obj[key] || !(key in obj)) return false;\r\n        }\r\n        return true;\r\n    }    \r\n\r\n    function _mixin(target, source, deep, safe) {\r\n        for (var key in source) {\r\n            //if (!source.hasOwnProperty(key)) {\r\n            //    continue;\r\n            //}\r\n            if (safe && target[key] !== undefined) {\r\n                continue;\r\n            }\r\n            // if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {\r\n            //    if (isPlainObject(source[key]) && !isPlainObject(target[key])) {\r\n            if (deep && isPlainObject(source[key])) {\r\n                if (!isPlainObject(target[key])) {\r\n                    target[key] = {};\r\n                }\r\n                //if (isArray(source[key]) && !isArray(target[key])) {\r\n                //    target[key] = [];\r\n                //}\r\n                _mixin(target[key], source[key], deep, safe);\r\n            } else if (source[key] !== undefined) {\r\n                target[key] = source[key]\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    function _parseMixinArgs(args) {\r\n        var params = slice.call(arguments, 0),\r\n            target = params.shift(),\r\n            deep = false;\r\n        if (isBoolean(params[params.length - 1])) {\r\n            deep = params.pop();\r\n        }\r\n\r\n        return {\r\n            target: target,\r\n            sources: params,\r\n            deep: deep\r\n        };\r\n    }\r\n\r\n    function mixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, false);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n   // Return a copy of the object without the blacklisted properties.\r\n    function omit(obj, prop1,prop2) {\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n        var result = mixin({},obj);\r\n        for(var i=1;i<arguments.length;i++) {\r\n            var pn = arguments[i];\r\n            if (pn in obj) {\r\n                delete result[pn];\r\n            }\r\n        }\r\n        return result;\r\n\r\n    }\r\n\r\n   // Return a copy of the object only containing the whitelisted properties.\r\n    function pick(obj,prop1,prop2) {\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n        var result = {};\r\n        for(var i=1;i<arguments.length;i++) {\r\n            var pn = arguments[i];\r\n            if (pn in obj) {\r\n                result[pn] = obj[pn];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function removeItem(items, item) {\r\n        if (isArray(items)) {\r\n            var idx = items.indexOf(item);\r\n            if (idx != -1) {\r\n                items.splice(idx, 1);\r\n            }\r\n        } else if (isPlainObject(items)) {\r\n            for (var key in items) {\r\n                if (items[key] == item) {\r\n                    delete items[key];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    function safeMixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, true);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n    // Retrieve the values of an object's properties.\r\n    function values(obj) {\r\n        var keys = allKeys(obj);\r\n        var length = keys.length;\r\n        var values = Array(length);\r\n        for (var i = 0; i < length; i++) {\r\n            values[i] = obj[keys[i]];\r\n        }\r\n        return values;\r\n    }\r\n\r\n    function clone( /*anything*/ src,checkCloneMethod) {\r\n        var copy;\r\n        if (src === undefined || src === null) {\r\n            copy = src;\r\n        } else if (checkCloneMethod && src.clone) {\r\n            copy = src.clone();\r\n        } else if (isArray(src)) {\r\n            copy = [];\r\n            for (var i = 0; i < src.length; i++) {\r\n                copy.push(clone(src[i]));\r\n            }\r\n        } else if (isPlainObject(src)) {\r\n            copy = {};\r\n            for (var key in src) {\r\n                copy[key] = clone(src[key]);\r\n            }\r\n        } else {\r\n            copy = src;\r\n        }\r\n\r\n        return copy;\r\n\r\n    }\r\n\r\n    function scall(obj,method,arg1,arg2) {\r\n        if (obj && obj[method]) {\r\n            var args = slice.call(arguments, 2);\r\n\r\n            return obj[method].apply(obj,args);\r\n        }\r\n    }\r\n\r\n    return skylark.attach(\"langx.objects\",{\r\n        allKeys: allKeys,\r\n\r\n        attach : skylark.attach,\r\n\r\n        clone: clone,\r\n\r\n        defaults : createAssigner(allKeys, true),\r\n\r\n        each : each,\r\n\r\n        extend : extend,\r\n\r\n        has: has,\r\n\r\n        includes: includes,\r\n\r\n        isMatch: isMatch,\r\n\r\n        keys: keys,\r\n\r\n        mixin: mixin,\r\n\r\n        omit: omit,\r\n\r\n        pick: pick,\r\n\r\n        removeItem: removeItem,\r\n     \r\n        safeMixin: safeMixin,\r\n\r\n        scall,\r\n\r\n        values: values\r\n    });\r\n\r\n\r\n});\ndefine('skylark-langx-objects/isEqual',[\r\n\t\"skylark-langx-types\",\r\n\t\"./objects\"\r\n],function(types,objects) {\r\n    var isFunction = types.isFunction;\r\n\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    var eq, deepEq;\r\n    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\r\n\r\n    eq = function(a, b, aStack, bStack) {\r\n        // Identical objects are equal. `0 === -0`, but they aren't identical.\r\n        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\r\n        if (a === b) return a !== 0 || 1 / a === 1 / b;\r\n        // `null` or `undefined` only equal to itself (strict comparison).\r\n        if (a == null || b == null) return false;\r\n        // `NaN`s are equivalent, but non-reflexive.\r\n        if (a !== a) return b !== b;\r\n        // Exhaust primitive checks\r\n        var type = typeof a;\r\n        if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\r\n        return deepEq(a, b, aStack, bStack);\r\n    };\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    deepEq = function(a, b, aStack, bStack) {\r\n        // Unwrap any wrapped objects.\r\n        //if (a instanceof _) a = a._wrapped;\r\n        //if (b instanceof _) b = b._wrapped;\r\n        // Compare `[[Class]]` names.\r\n        var className = toString.call(a);\r\n        if (className !== toString.call(b)) return false;\r\n        switch (className) {\r\n            // Strings, numbers, regular expressions, dates, and booleans are compared by value.\r\n            case '[object RegExp]':\r\n            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\r\n            case '[object String]':\r\n                // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\r\n                // equivalent to `new String(\"5\")`.\r\n                return '' + a === '' + b;\r\n            case '[object Number]':\r\n                // `NaN`s are equivalent, but non-reflexive.\r\n                // Object(NaN) is equivalent to NaN.\r\n                if (+a !== +a) return +b !== +b;\r\n                // An `egal` comparison is performed for other numeric values.\r\n                return +a === 0 ? 1 / +a === 1 / b : +a === +b;\r\n            case '[object Date]':\r\n            case '[object Boolean]':\r\n                // Coerce dates and booleans to numeric primitive values. Dates are compared by their\r\n                // millisecond representations. Note that invalid dates with millisecond representations\r\n                // of `NaN` are not equivalent.\r\n                return +a === +b;\r\n            case '[object Symbol]':\r\n                return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\r\n        }\r\n\r\n        var areArrays = className === '[object Array]';\r\n        if (!areArrays) {\r\n            if (typeof a != 'object' || typeof b != 'object') return false;\r\n            // Objects with different constructors are not equivalent, but `Object`s or `Array`s\r\n            // from different frames are.\r\n            var aCtor = a.constructor, bCtor = b.constructor;\r\n            if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&\r\n                               isFunction(bCtor) && bCtor instanceof bCtor)\r\n                          && ('constructor' in a && 'constructor' in b)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Assume equality for cyclic structures. The algorithm for detecting cyclic\r\n        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\r\n\r\n        // Initializing stack of traversed objects.\r\n        // It's done here since we only need them for objects and arrays comparison.\r\n        aStack = aStack || [];\r\n        bStack = bStack || [];\r\n        var length = aStack.length;\r\n        while (length--) {\r\n            // Linear search. Performance is inversely proportional to the number of\r\n            // unique nested structures.\r\n            if (aStack[length] === a) return bStack[length] === b;\r\n        }\r\n\r\n        // Add the first object to the stack of traversed objects.\r\n        aStack.push(a);\r\n        bStack.push(b);\r\n\r\n        // Recursively compare objects and arrays.\r\n        if (areArrays) {\r\n            // Compare array lengths to determine if a deep comparison is necessary.\r\n            length = a.length;\r\n            if (length !== b.length) return false;\r\n            // Deep compare the contents, ignoring non-numeric properties.\r\n            while (length--) {\r\n                if (!eq(a[length], b[length], aStack, bStack)) return false;\r\n            }\r\n        } else {\r\n            // Deep compare objects.\r\n            var keys = Object.keys(a), key;\r\n            length = keys.length;\r\n            // Ensure that both objects contain the same number of properties before comparing deep equality.\r\n            if (Object.keys(b).length !== length) return false;\r\n            while (length--) {\r\n                // Deep compare each member\r\n                key = keys[length];\r\n                if (!(b[key]!==undefined && eq(a[key], b[key], aStack, bStack))) return false;\r\n            }\r\n        }\r\n        // Remove the first object from the stack of traversed objects.\r\n        aStack.pop();\r\n        bStack.pop();\r\n        return true;\r\n    };\r\n\r\n\r\n   // Perform a deep comparison to check if two objects are equal.\r\n    function isEqual(a, b) {\r\n        return eq(a, b);\r\n    }\r\n\r\n    return objects.isEqual = isEqual;\r\n\t\r\n});\ndefine('skylark-langx-objects/result',[\r\n\t\"skylark-langx-types\",\r\n\t\"./objects\"\r\n],function(types,objects) {\r\n\tvar isArray = types.isArray,\r\n\t\tisFunction = types.isFunction;\r\n\r\n    function result(obj, path, fallback) {\r\n        if (!isArray(path)) {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length;\r\n        if (!length) {\r\n          return isFunction(fallback) ? fallback.call(obj) : fallback;\r\n        }\r\n        for (var i = 0; i < length; i++) {\r\n          var prop = obj == null ? void 0 : obj[path[i]];\r\n          if (prop === void 0) {\r\n            prop = fallback;\r\n            i = length; // Ensure we don't continue iterating.\r\n          }\r\n          obj = isFunction(prop) ? prop.call(obj) : prop;\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    return objects.result = result;\r\n\t\r\n});\ndefine('skylark-langx-objects/main',[\r\n\t\"./objects\",\r\n\t\"./isEqual\",\r\n\t\"./result\"\r\n],function(objects){\r\n\treturn objects;\r\n});\ndefine('skylark-langx-objects', ['skylark-langx-objects/main'], function (main) { return main; });\n\n"]}