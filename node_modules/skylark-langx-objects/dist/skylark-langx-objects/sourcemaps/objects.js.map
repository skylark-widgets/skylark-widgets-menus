{"version":3,"sources":["objects.js"],"names":["define","skylark","types","keysFunc","defaults","hasOwnProperty","Object","prototype","slice","Array","isBoolean","isObject","isFunction","isPlainObject","isArray","isArrayLike","isString","toInteger","allKeys","obj","keys","key","push","has","path","call","length","i","_mixin","target","source","deep","safe","undefined","_parseMixinArgs","args","params","arguments","shift","pop","sources","mixin","apply","this","forEach","values","attach","clone","src","checkCloneMethod","copy","index","l","each","callback","isForEach","value","undef","extend","arg","includes","collection","fromIndex","guard","nativeMax","indexOf","baseIndexOf","isMatch","object","attrs","omit","prop1","prop2","result","pn","pick","removeItem","items","item","idx","splice","safeMixin","scall","method","arg1","arg2"],"mappings":"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","file":"../objects.js","sourcesContent":["define([\r\n    \"skylark-langx-ns\",\r\n    \"skylark-langx-types\"\r\n],function(skylark,types){\r\n    var hasOwnProperty = Object.prototype.hasOwnProperty,\r\n        slice = Array.prototype.slice,\r\n        isBoolean = types.isBoolean,\r\n        isFunction = types.isFunction,\r\n        isObject = types.isObject,\r\n        isPlainObject = types.isPlainObject,\r\n        isArray = types.isArray,\r\n        isArrayLike = types.isArrayLike,\r\n        isString = types.isString,\r\n        toInteger = types.toInteger;\r\n\r\n     // An internal function for creating assigner functions.\r\n    function createAssigner(keysFunc, defaults) {\r\n        return function(obj) {\r\n          var length = arguments.length;\r\n          if (defaults) obj = Object(obj);  \r\n          if (length < 2 || obj == null) return obj;\r\n          for (var index = 1; index < length; index++) {\r\n            var source = arguments[index],\r\n                keys = keysFunc(source),\r\n                l = keys.length;\r\n            for (var i = 0; i < l; i++) {\r\n              var key = keys[i];\r\n              if (!defaults || obj[key] === void 0) obj[key] = source[key];\r\n            }\r\n          }\r\n          return obj;\r\n       };\r\n    }\r\n\r\n\r\n    // Retrieve all the property names of an object.\r\n    function allKeys(obj) {\r\n        if (!isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function each(obj, callback,isForEach) {\r\n        var length, key, i, undef, value;\r\n\r\n        if (obj) {\r\n            length = obj.length;\r\n\r\n            if (length === undef) {\r\n                // Loop object items\r\n                for (key in obj) {\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        value = obj[key];\r\n                        if ((isForEach ? callback.call(value, value, key) : callback.call(value, key, value) ) === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Loop array items\r\n                for (i = 0; i < length; i++) {\r\n                    value = obj[i];\r\n                    if ((isForEach ? callback.call(value, value, i) : callback.call(value, i, value) )=== false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function extend(target) {\r\n        var deep, args = slice.call(arguments, 1);\r\n        if (typeof target == 'boolean') {\r\n            deep = target\r\n            target = args.shift()\r\n        }\r\n        if (args.length == 0) {\r\n            args = [target];\r\n            target = this;\r\n        }\r\n        args.forEach(function(arg) {\r\n            mixin(target, arg, deep);\r\n        });\r\n        return target;\r\n    }\r\n\r\n    // Retrieve the names of an object's own properties.\r\n    // Delegates to **ECMAScript 5**'s native `Object.keys`.\r\n    function keys(obj) {\r\n        if (isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) if (has(obj, key)) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function has(obj, path) {\r\n        if (!isArray(path)) {\r\n            return obj != null && hasOwnProperty.call(obj, path);\r\n        }\r\n        var length = path.length;\r\n        for (var i = 0; i < length; i++) {\r\n            var key = path[i];\r\n            if (obj == null || !hasOwnProperty.call(obj, key)) {\r\n                return false;\r\n            }\r\n            obj = obj[key];\r\n        }\r\n        return !!length;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\r\n     * checked for a substring of `value`, otherwise\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\r\n     * the offset from the end of `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\r\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\r\n     * @example\r\n     *\r\n     * _.includes([1, 2, 3], 1);\r\n     * // => true\r\n     *\r\n     * _.includes([1, 2, 3], 1, 2);\r\n     * // => false\r\n     *\r\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\r\n     * // => true\r\n     *\r\n     * _.includes('abcd', 'bc');\r\n     * // => true\r\n     */\r\n    function includes(collection, value, fromIndex, guard) {\r\n      collection = isArrayLike(collection) ? collection : values(collection);\r\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\r\n\r\n      var length = collection.length;\r\n      if (fromIndex < 0) {\r\n        fromIndex = nativeMax(length + fromIndex, 0);\r\n      }\r\n      return isString(collection)\r\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\r\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\r\n    }\r\n\r\n\r\n    // Returns whether an object has a given set of `key:value` pairs.\r\n    function isMatch(object, attrs) {\r\n        var keys = keys(attrs), length = keys.length;\r\n        if (object == null) return !length;\r\n        var obj = Object(object);\r\n        for (var i = 0; i < length; i++) {\r\n          var key = keys[i];\r\n          if (attrs[key] !== obj[key] || !(key in obj)) return false;\r\n        }\r\n        return true;\r\n    }    \r\n\r\n    function _mixin(target, source, deep, safe) {\r\n        for (var key in source) {\r\n            //if (!source.hasOwnProperty(key)) {\r\n            //    continue;\r\n            //}\r\n            if (safe && target[key] !== undefined) {\r\n                continue;\r\n            }\r\n            // if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {\r\n            //    if (isPlainObject(source[key]) && !isPlainObject(target[key])) {\r\n            if (deep && isPlainObject(source[key])) {\r\n                if (!isPlainObject(target[key])) {\r\n                    target[key] = {};\r\n                }\r\n                //if (isArray(source[key]) && !isArray(target[key])) {\r\n                //    target[key] = [];\r\n                //}\r\n                _mixin(target[key], source[key], deep, safe);\r\n            } else if (source[key] !== undefined) {\r\n                target[key] = source[key]\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    function _parseMixinArgs(args) {\r\n        var params = slice.call(arguments, 0),\r\n            target = params.shift(),\r\n            deep = false;\r\n        if (isBoolean(params[params.length - 1])) {\r\n            deep = params.pop();\r\n        }\r\n\r\n        return {\r\n            target: target,\r\n            sources: params,\r\n            deep: deep\r\n        };\r\n    }\r\n\r\n    function mixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, false);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n   // Return a copy of the object without the blacklisted properties.\r\n    function omit(obj, prop1,prop2) {\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n        var result = mixin({},obj);\r\n        for(var i=1;i<arguments.length;i++) {\r\n            var pn = arguments[i];\r\n            if (pn in obj) {\r\n                delete result[pn];\r\n            }\r\n        }\r\n        return result;\r\n\r\n    }\r\n\r\n   // Return a copy of the object only containing the whitelisted properties.\r\n    function pick(obj,prop1,prop2) {\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n        var result = {};\r\n        for(var i=1;i<arguments.length;i++) {\r\n            var pn = arguments[i];\r\n            if (pn in obj) {\r\n                result[pn] = obj[pn];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function removeItem(items, item) {\r\n        if (isArray(items)) {\r\n            var idx = items.indexOf(item);\r\n            if (idx != -1) {\r\n                items.splice(idx, 1);\r\n            }\r\n        } else if (isPlainObject(items)) {\r\n            for (var key in items) {\r\n                if (items[key] == item) {\r\n                    delete items[key];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    function safeMixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, true);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n    // Retrieve the values of an object's properties.\r\n    function values(obj) {\r\n        var keys = allKeys(obj);\r\n        var length = keys.length;\r\n        var values = Array(length);\r\n        for (var i = 0; i < length; i++) {\r\n            values[i] = obj[keys[i]];\r\n        }\r\n        return values;\r\n    }\r\n\r\n    function clone( /*anything*/ src,checkCloneMethod) {\r\n        var copy;\r\n        if (src === undefined || src === null) {\r\n            copy = src;\r\n        } else if (checkCloneMethod && src.clone) {\r\n            copy = src.clone();\r\n        } else if (isArray(src)) {\r\n            copy = [];\r\n            for (var i = 0; i < src.length; i++) {\r\n                copy.push(clone(src[i]));\r\n            }\r\n        } else if (isPlainObject(src)) {\r\n            copy = {};\r\n            for (var key in src) {\r\n                copy[key] = clone(src[key]);\r\n            }\r\n        } else {\r\n            copy = src;\r\n        }\r\n\r\n        return copy;\r\n\r\n    }\r\n\r\n    function scall(obj,method,arg1,arg2) {\r\n        if (obj && obj[method]) {\r\n            var args = slice.call(arguments, 2);\r\n\r\n            return obj[method].apply(obj,args);\r\n        }\r\n    }\r\n\r\n    return skylark.attach(\"langx.objects\",{\r\n        allKeys: allKeys,\r\n\r\n        attach : skylark.attach,\r\n\r\n        clone: clone,\r\n\r\n        defaults : createAssigner(allKeys, true),\r\n\r\n        each : each,\r\n\r\n        extend : extend,\r\n\r\n        has: has,\r\n\r\n        includes: includes,\r\n\r\n        isMatch: isMatch,\r\n\r\n        keys: keys,\r\n\r\n        mixin: mixin,\r\n\r\n        omit: omit,\r\n\r\n        pick: pick,\r\n\r\n        removeItem: removeItem,\r\n     \r\n        safeMixin: safeMixin,\r\n\r\n        scall,\r\n\r\n        values: values\r\n    });\r\n\r\n\r\n});"]}