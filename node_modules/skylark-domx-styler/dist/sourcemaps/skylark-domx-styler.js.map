{"version":3,"sources":["skylark-domx-styler.js"],"names":["define","skylark","langx","Array","prototype","every","forEach","camelCase","dasherize","maybeAddPx","name","value","cssNumber","column-count","columns","font-weight","line-height","opacity","z-index","zoom","classReCache","classRE","RegExp","className","node","klass","svg","undefined","baseVal","elementDisplay","addClass","elm","this","cls","isString","split","re","match","getStyles","elem","view","ownerDocument","defaultView","opener","window","getComputedStyle","hasClass","removeClass","replace","trim","styler","mixin","autocssfix","cssHooks","css","property","arguments","length","computedStyle","style","getPropertyValue","isArrayLike","props","call","prop","removeProperty","key","cssText","disabled","dom","hide","isInvisible","show","nodeName","element","display","document","createElement","body","appendChild","parentNode","removeChild","defaultDisplay","toggleClass","when","attach","velm","$","delegate","method","VisualElement","fn","wraps","wrapper_name_value","wrapper_some_chk","wrapper_every_act_firstArgFunc","replaceClass","newClass","oldClass","main"],"mappings":"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","file":"../skylark-domx-styler.js","sourcesContent":["define('skylark-domx-styler/styler',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark, langx) {\r\n    var every = Array.prototype.every,\r\n        forEach = Array.prototype.forEach,\r\n        camelCase = langx.camelCase,\r\n        dasherize = langx.dasherize;\r\n\r\n    function maybeAddPx(name, value) {\r\n        return (typeof value == \"number\" && !cssNumber[dasherize(name)]) ? value + \"px\" : value\r\n    }\r\n\r\n    var cssNumber = {\r\n            'column-count': 1,\r\n            'columns': 1,\r\n            'font-weight': 1,\r\n            'line-height': 1,\r\n            'opacity': 1,\r\n            'z-index': 1,\r\n            'zoom': 1\r\n        },\r\n        classReCache = {\r\n\r\n        };\r\n\r\n    function classRE(name) {\r\n        return name in classReCache ?\r\n            classReCache[name] : (classReCache[name] = new RegExp('(^|\\\\s)' + name + '(\\\\s|$)'));\r\n    }\r\n\r\n    // access className property while respecting SVGAnimatedString\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {String} value\r\n     */\r\n    function className(node, value) {\r\n        var klass = node.className || '',\r\n            svg = klass && klass.baseVal !== undefined\r\n\r\n        if (value === undefined) return svg ? klass.baseVal : klass\r\n        svg ? (klass.baseVal = value) : (node.className = value)\r\n    }\r\n\r\n    function disabled(elm, value ) {\r\n        if (arguments.length < 2) {\r\n            return !!this.dom.disabled;\r\n        }\r\n\r\n        elm.disabled = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    var elementDisplay = {};\r\n\r\n    function defaultDisplay(nodeName) {\r\n        var element, display\r\n        if (!elementDisplay[nodeName]) {\r\n            element = document.createElement(nodeName)\r\n            document.body.appendChild(element)\r\n            display = getStyles(element).getPropertyValue(\"display\")\r\n            element.parentNode.removeChild(element)\r\n            display == \"none\" && (display = \"block\")\r\n            elementDisplay[nodeName] = display\r\n        }\r\n        return elementDisplay[nodeName]\r\n    }\r\n    /*\r\n     * Display the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function show(elm) {\r\n        styler.css(elm, \"display\", \"\");\r\n        if (styler.css(elm, \"display\") == \"none\") {\r\n            styler.css(elm, \"display\", defaultDisplay(elm.nodeName));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function isInvisible(elm) {\r\n        return styler.css(elm, \"display\") == \"none\" || styler.css(elm, \"opacity\") == 0;\r\n    }\r\n\r\n    /*\r\n     * Hide the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function hide(elm) {\r\n        styler.css(elm, \"display\", \"none\");\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function addClass(elm, name) {\r\n        if (!name) return this\r\n        var cls = className(elm),\r\n            names;\r\n        if (langx.isString(name)) {\r\n            names = name.split(/\\s+/g);\r\n        } else {\r\n            names = name;\r\n        }\r\n        names.forEach(function(klass) {\r\n            var re = classRE(klass);\r\n            if (!cls.match(re)) {\r\n                cls += (cls ? \" \" : \"\") + klass;\r\n            }\r\n        });\r\n\r\n        className(elm, cls);\r\n\r\n        return this;\r\n    }\r\n\r\n    function getStyles( elem ) {\r\n\r\n        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\r\n        // IE throws on elements created in popups\r\n        // FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\r\n        var view = elem.ownerDocument.defaultView;\r\n\r\n        if ( !view || !view.opener ) {\r\n            view = window;\r\n        }\r\n\r\n        return view.getComputedStyle( elem);\r\n    }\r\n\r\n\r\n    /*\r\n     * Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} property\r\n     * @param {Any} value\r\n     */\r\n    function css(elm, property, value) {\r\n        if (arguments.length < 3) {\r\n            var computedStyle,\r\n                computedStyle = getStyles(elm)\r\n            if (langx.isString(property)) {\r\n                return elm.style[camelCase(property)] || computedStyle.getPropertyValue(dasherize(property))\r\n            } else if (langx.isArrayLike(property)) {\r\n                var props = {}\r\n                forEach.call(property, function(prop) {\r\n                    props[prop] = (elm.style[camelCase(prop)] || computedStyle.getPropertyValue(dasherize(prop)))\r\n                })\r\n                return props\r\n            }\r\n        }\r\n\r\n        var css = '';\r\n        if (typeof(property) == 'string') {\r\n            if (!value && value !== 0) {\r\n                elm.style.removeProperty(dasherize(property));\r\n            } else {\r\n                css = dasherize(property) + \":\" + maybeAddPx(property, value)\r\n            }\r\n        } else {\r\n            for (key in property) {\r\n                if (property[key] === undefined) {\r\n                    continue;\r\n                }\r\n                if (!property[key] && property[key] !== 0) {\r\n                    elm.style.removeProperty(dasherize(key));\r\n                } else {\r\n                    css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'\r\n                }\r\n            }\r\n        }\r\n\r\n        elm.style.cssText += ';' + css;\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Determine whether any of the matched elements are assigned the given class.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function hasClass(elm, name) {\r\n        var re = classRE(name);\r\n        return elm.className && elm.className.match(re);\r\n    }\r\n\r\n    /*\r\n     * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function removeClass(elm, name) {\r\n        if (name) {\r\n            var cls = className(elm),\r\n                names;\r\n\r\n            if (langx.isString(name)) {\r\n                names = name.split(/\\s+/g);\r\n            } else {\r\n                names = name;\r\n            }\r\n\r\n            names.forEach(function(klass) {\r\n                var re = classRE(klass);\r\n                if (cls.match(re)) {\r\n                    cls = cls.replace(re, \" \");\r\n                }\r\n            });\r\n\r\n            className(elm, cls.trim());\r\n        } else {\r\n            className(elm, \"\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Add or remove one or more classes from the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     * @param {} when\r\n     */\r\n    function toggleClass(elm, name, when) {\r\n        var self = this;\r\n        name.split(/\\s+/g).forEach(function(klass) {\r\n            if (when === undefined) {\r\n                when = !hasClass(elm, klass);\r\n            }\r\n            if (when) {\r\n                addClass(elm, klass);\r\n            } else {\r\n                removeClass(elm, klass)\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    var styler = function() {\r\n        return styler;\r\n    };\r\n\r\n    langx.mixin(styler, {\r\n        autocssfix: false,\r\n        cssHooks: {\r\n\r\n        },\r\n\r\n        addClass: addClass,\r\n        className: className,\r\n        css: css,\r\n        disabled : disabled,        \r\n        hasClass: hasClass,\r\n        hide: hide,\r\n        isInvisible: isInvisible,\r\n        removeClass: removeClass,\r\n        show: show,\r\n        toggleClass: toggleClass\r\n    });\r\n\r\n    return skylark.attach(\"domx.styler\", styler);\r\n});\ndefine('skylark-domx-styler/main',[\r\n\t\"./styler\",\r\n\t\"skylark-domx-velm\",\r\n\t\"skylark-domx-query\"\t\r\n],function(styler,velm,$){\r\n\t\r\n    // from ./styler\r\n    velm.delegate([\r\n        \"addClass\",\r\n        \"className\",\r\n        \"css\",\r\n        \"hasClass\",\r\n        \"hide\",\r\n        \"isInvisible\",\r\n        \"removeClass\",\r\n        \"show\",\r\n        \"toggleClass\"\r\n    ], styler);\r\n\r\n    // properties\r\n\r\n    var properties = [ 'position', 'left', 'top', 'right', 'bottom', 'width', 'height', 'border', 'borderLeft',\r\n    'borderTop', 'borderRight', 'borderBottom', 'borderColor', 'display', 'overflow', 'margin', 'marginLeft', 'marginTop', 'marginRight', 'marginBottom', 'padding', 'paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom', 'color',\r\n    'background', 'backgroundColor', 'opacity', 'fontSize', 'fontWeight', 'textAlign', 'textDecoration', 'textTransform', 'cursor', 'zIndex' ];\r\n\r\n    properties.forEach( function ( property ) {\r\n\r\n        var method = property;\r\n\r\n        velm.VisualElement.prototype[method ] = function (value) {\r\n\r\n            this.css( property, value );\r\n\r\n            return this;\r\n\r\n        };\r\n\r\n    });\r\n\r\n\r\n    $.fn.style = $.wraps.wrapper_name_value(styler.css, styler);\r\n\r\n    $.fn.css = $.wraps.wrapper_name_value(styler.css, styler);\r\n\r\n    //hasClass(name)\r\n    $.fn.hasClass = $.wraps.wrapper_some_chk(styler.hasClass, styler);\r\n\r\n    //addClass(name)\r\n    $.fn.addClass = $.wraps.wrapper_every_act_firstArgFunc(styler.addClass, styler, styler.className);\r\n\r\n    //removeClass(name)\r\n    $.fn.removeClass = $.wraps.wrapper_every_act_firstArgFunc(styler.removeClass, styler, styler.className);\r\n\r\n    //toogleClass(name,when)\r\n    $.fn.toggleClass = $.wraps.wrapper_every_act_firstArgFunc(styler.toggleClass, styler, styler.className);\r\n\r\n    $.fn.replaceClass = function(newClass, oldClass) {\r\n        this.removeClass(oldClass);\r\n        this.addClass(newClass);\r\n        return this;\r\n    };\r\n\r\n    $.fn.replaceClass = function(newClass, oldClass) {\r\n        this.removeClass(oldClass);\r\n        this.addClass(newClass);\r\n        return this;\r\n    };\r\n        \r\n\treturn styler;\r\n});\ndefine('skylark-domx-styler', ['skylark-domx-styler/main'], function (main) { return main; });\n\n"]}