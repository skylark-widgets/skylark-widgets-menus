{"version":3,"sources":["skylark-domx-files.js"],"names":["define","skylark","files","attach","arrays","Deferred","styler","eventer","velm","$","webentry","dropzone","elm","params","hoverClass","droppedCallback","dropped","enterdCount","on","e","dataTransfer","types","indexOf","stop","addClass","removeClass","items","length","webkitGetAsEntry","getAsEntry","all","map","item","then","this","delegate","fn","wraps","wrapper_every_act","objects","pastezone","pastedCallback","pasted","originalEvent","clipboardData","each","index","file","getAsFile","push","select","picker","preventDefault","Emitter","elmx","plugins","SingleUploader","Plugin","klassName","pluginName","options","selectors","startUploads","cancelUploads","[object Object]","super","_velm","_elm","_initFileHandlers","self","dzSelector","pzSelector","pkSelector","_addFile","multiple","picked","emit","langx","FileUpload","MultiUploader","inherit","uploadUrl","formParamName","maxConnections","allowedExtensions","sizeLimit","minSizeLimit","autoUpload","fileList","fileItem","nodata","template","dataType","name","size","cancel","clear","progress","message","_construct","overrided","_initEventHandler","_initUpoadHandler","_updateFileList","_addFiles","_handler","url","onProgress","id","fileName","loaded","total","_onProgress","onComplete","result","_onComplete","onCancel","_onCancel","onFailure","_onFailure","itemSelectors","_listElement","$fileItem","closest","fileId","data","remove","click","$files","find","forEach","send","$item","_getItemByFileId","percent","parseInt","progressHTML","_formatSize","css","parent","html","_updateFile","_filesInProgress","doneMsg","_addToList","getName","fileSize","getSize","_formatFileName","append","with_files_elements","without_files_elements","when_pending","when_running","when_done","status","add","i","item2","_validateFile","value","replace","_isAllowedExtension","_error","code","messages","r","replacement","join","showMessage","slice","ext","toLowerCase","allowed","bytes","Math","max","toFixed","register","main"],"mappings":";;;;;;;g4BAAAA,EAAA,4BACA,yBACA,SAAAC,GAeA,IAAAC,EAAA,WACA,OAAAA,GAGA,OAAAD,EAAAE,OAAA,aAAAD,KAEAF,EAAA,+BACA,uBACA,yBACA,sBACA,uBACA,oBACA,qBACA,6BACA,WACA,SAAAI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAR,GAKA,SAAAS,EAAAC,EAAAC,GAEA,IAAAC,GADAD,EAAAA,OACAC,YAAA,WACAC,EAAAF,EAAAG,QAEAC,EAAA,EAlCA,OAmCAV,EAAAW,GAAAN,EAAA,YAAA,SAAAO,GACAA,EAAAC,cAAAD,EAAAC,aAAAC,MAAAC,QAAA,UAAA,IACAf,EAAAgB,KAAAJ,GACAF,IACAX,EAAAkB,SAAAZ,EAAAE,MAIAP,EAAAW,GAAAN,EAAA,WAAA,SAAAO,GACAA,EAAAC,cAAAD,EAAAC,aAAAC,MAAAC,QAAA,UAAA,GACAf,EAAAgB,KAAAJ,KAIAZ,EAAAW,GAAAN,EAAA,YAAA,SAAAO,GACAA,EAAAC,cAAAD,EAAAC,aAAAC,MAAAC,QAAA,UAAA,GAEA,KADAL,GAEAX,EAAAmB,YAAAb,EAAAE,KAKAP,EAAAW,GAAAN,EAAA,OAAA,SAAAO,GACA,GAAAA,EAAAC,cAAAD,EAAAC,aAAAC,MAAAC,QAAA,UAAA,IACAhB,EAAAmB,YAAAb,EAAAE,GACAP,EAAAgB,KAAAJ,GACAJ,GAAA,CACA,IAAAW,EAAAP,EAAAC,aAAAM,MACAA,GAAAA,EAAAC,SAAAD,EAAA,GAAAE,kBACAF,EAAA,GAAAG,YACAnB,EAAAoB,IACA1B,EAAA2B,IAAAL,EAAA,SAAAM,GACA,OAAAA,EAAAJ,iBACAI,EAAAJ,mBAEAI,EAAAH,gBA/EAI,KAAAlB,GAEAA,EAAAI,EAAAC,aAAAlB,UAMAgC,KAWA,OATAhC,EAAAS,SAAAA,EAEAH,EAAA2B,UACA,YACAjC,GAGAO,EAAA2B,GAAAzB,SAAAF,EAAA4B,MAAAC,kBAAApC,EAAAS,SAAAT,GAEAS,IAEAX,EAAA,gCACA,wBACA,uBACA,oBACA,qBACA,WACA,SAAAuC,EAAAhC,EAAAC,EAAAC,EAAAP,GACA,SAAAsC,EAAA5B,EAAAC,IACAA,EAAAA,OACAC,WAAA,IACA2B,EAAA5B,EAAA6B,OAmBA,OAjBAnC,EAAAW,GAAAN,EAAA,QAAA,SAAAO,GACA,IAAAO,EAAAP,EAAAwB,eAAAxB,EAAAwB,cAAAC,eACAzB,EAAAwB,cAAAC,cAAAlB,MACAxB,KACAwB,GAAAA,EAAAC,QACAY,EAAAM,KAAAnB,EAAA,SAAAoB,EAAAd,GACA,IAAAe,EAAAf,EAAAgB,WAAAhB,EAAAgB,YACAD,GACA7C,EAAA+C,KAAAF,KAIAN,GAAAvC,EAAAyB,QACAc,EAAAvC,KAIAgC,KAWA,OARAhC,EAAAsC,UAAAA,EAEAhC,EAAA2B,UACA,aACAjC,GAEAO,EAAA2B,GAAAI,UAAA/B,EAAA4B,MAAAC,kBAAApC,EAAAsC,UAAAtC,GAEAsC,IAIAxC,EAAA,6BACA,wBACA,uBACA,oBACA,qBACA,2BACA,WACA,SAAAuC,EAAAhC,EAAAC,EAAAC,EAAAyC,EAAAhD,GAMA,SAAAiD,EAAAvC,EAAAC,GAKA,OAJAN,EAAAW,GAAAN,EAAA,QAAA,SAAAO,GACAA,EAAAiC,iBACAF,EAAArC,KAEAqB,KAWA,OARAhC,EAAAiD,OAAAA,EAEA3C,EAAA2B,UACA,UACAjC,GAEAO,EAAA2B,GAAAe,OAAA1C,EAAA4B,MAAAC,kBAAApC,EAAAiD,OAAAjD,GAEAiD,IAMAnD,EAAA,qCACA,wBACA,+BACA,oBACA,uBACA,UACA,aACA,cACA,YACA,SACAqD,EACAhD,EACAiD,EACAC,EACArD,GA6FA,OAAAA,EAAAsD,6BArFAD,EAAAE,OACAC,gBACA,MAAA,iBAGAC,iBACA,MAAA,sBAGAC,cACA,OACAC,WACAV,OAAA,eACAxC,SAAA,iBACA6B,UAAA,kBAEAsB,aAAA,iBACAC,cAAA,oBAUAC,YAAApD,EAAAgD,GACAK,MAAArD,EAAAgD,GAEA1B,KAAAgC,MAAAZ,EAAApB,KAAAiC,MAEAjC,KAAAkC,oBAIAJ,oBACA,IAAAK,EAAAnC,KAEA2B,EAAA3B,KAAA0B,QAAAC,UACAS,EAAAT,EAAAlD,SACA4D,EAAAV,EAAArB,UACAgC,EAAAX,EAAAV,OAEAmB,GACApC,KAAAgC,MAAAzD,EAAA6D,GAAA3D,UACAK,QAAA,SAAAd,GACAmE,EAAAI,SAAAvE,EAAA,OAMAqE,GACArC,KAAAgC,MAAAzD,EAAA8D,GAAA/B,WACAE,OAAA,SAAAxC,GACAmE,EAAAI,SAAAvE,EAAA,OAKAsE,GACAtC,KAAAgC,MAAAzD,EAAA+D,GAAArB,QACAuB,UAAA,EACAC,OAAA,SAAAzE,GACAmE,EAAAI,SAAAvE,EAAA,OAMA8D,SAAAjB,GACAb,KAAA0C,KAAA,QAAA7B,GAOAiB,eAWAhE,EAAA,oCACA,wBACA,sBACA,qBACA,oBACA,0BACA,uBACA,WACA,SAAAC,EAAA4E,EAAApE,EAAA6C,EAAAwB,EAAAvB,EAAArD,GAEA,IA+BA6E,EAAAxB,EAAAE,OAAAuB,SACAtB,UAAA,WACAC,WAAA,qBAEAC,SACAqB,UAAA,UAEApE,QACAqE,cAAA,QAGAC,eAAA,EAEAC,qBACAC,UAAA,EACAC,aAAA,EAEAC,YAAA,EACA1B,WACA2B,SAAA,aACAC,SAAA,aACAC,OAAA,sBAEAvC,OAAA,eACAxC,SAAA,iBACA6B,UAAA,kBAEAsB,aAAA,iBACAC,cAAA,mBAGA4B,SA9DA,gxBAgEAC,SAAA,OAEAH,UACA5B,WACAgC,KAAA,QACAC,KAAA,QACAC,OAAA,UACAC,MAAA,SACAC,SAAA,YACAC,QAAA,YAGAP,SA7DA,mfAkEAQ,WAAA,SAAAvF,EAAAgD,GAmBA1B,KAAAkE,UAAAxF,EAAAgD,GAGA1B,KAAAgC,MAAAZ,EAAApB,KAAAiC,MAIAjC,KAAAmE,oBACAnE,KAAAkC,oBACAlC,KAAAoE,oBACApE,KAAAqE,mBAGAnC,kBAAA,WACA,IAAAC,EAAAnC,KAEA2B,EAAA3B,KAAA0B,QAAAC,UACAS,EAAAT,EAAAlD,SACA4D,EAAAV,EAAArB,UACAgC,EAAAX,EAAAV,OAEAmB,GACApC,KAAAgC,MAAAzD,EAAA6D,GAAA3D,UACAK,QAAA,SAAAd,GACAmE,EAAAmC,UAAAtG,MAMAqE,GACArC,KAAAgC,MAAAzD,EAAA8D,GAAA/B,WACAE,OAAA,SAAAxC,GACAmE,EAAAmC,UAAAtG,MAKAsE,GACAtC,KAAAgC,MAAAzD,EAAA+D,GAAArB,QACAuB,UAAA,EACAC,OAAA,SAAAzE,GACAmE,EAAAmC,UAAAtG,OAMAoG,kBAAA,WACA,IAAAjC,EAAAnC,KAGAA,KAAAuE,SAAA,IAAA3B,GACA4B,IAAAxE,KAAA0B,QAAAqB,UACAE,eAAAjD,KAAA0B,QAAAuB,eACAwB,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA1C,EAAA2C,YAAAJ,EAAAC,EAAAC,EAAAC,IAEAE,WAAA,SAAAL,EAAAC,EAAAK,GACA7C,EAAA8C,YAAAP,EAAAC,EAAAK,IAEAE,SAAA,SAAAR,EAAAC,GACAxC,EAAAgD,UAAAT,EAAAC,IAEAS,UAAA,SAAAV,EAAAC,EAAA1F,GACAkD,EAAAkD,WAAAX,EAAAC,EAAA1F,OAQAkF,kBAAA,WACA,IAAAhC,EAAAnC,KACA2B,EAAA3B,KAAA0B,QAAAC,UACA2D,EAAAtF,KAAA0B,QAAA6B,SAAA5B,UACA3B,KAAAuF,aAGAvF,KAAAgC,MAAAzD,EAAAoD,EAAA2B,UAAAtE,GAAA,QAAAsG,EAAAzB,OAAA,SAAA5E,GACA,IAAAuG,EAAAjH,EAAAyB,MAAAyF,QAAA9D,EAAA4B,UACAmC,EAAAF,EAAAG,KAAA,UACAxD,EAAAoC,SAAAV,OAAA6B,GACAF,EAAAI,SACAzD,EAAAkC,oBAIArE,KAAAgC,MAAAzD,EAAAoD,EAAA2B,UAAAtE,GAAA,QAAAsG,EAAAxB,MAAA,SAAA7E,GACA,IAAAuG,EAAAjH,EAAAyB,MAAAyF,QAAA9D,EAAA4B,UACAiC,EAAAG,KAAA,UACAH,EAAAI,SACAzD,EAAAkC,oBAIArE,KAAAgC,MAAAzD,EAAAoD,EAAAE,eAAAgE,MAAA,WACA,IAAAC,EAAA3D,EAAAH,MAAAzD,EAAAoD,EAAA2B,UAAAyC,KAAApE,EAAA4B,UACAuC,EAAAE,QAAA,SAAAzC,GACA,IAAAiC,EAAAjH,EAAAgF,GACAmC,EAAAF,EAAAG,KAAA,UACAxD,EAAAoC,SAAAV,OAAA6B,GACAF,EAAAI,WAEAzD,EAAAkC,oBAKArE,KAAAgC,MAAAzD,EAAAoD,EAAAC,cAAAiE,MAAA,WACA,IAAAC,EAAA3D,EAAAH,MAAAzD,EAAAoD,EAAA2B,UAAAyC,KAAApE,EAAA4B,UACAuC,EAAAE,QAAA,SAAAzC,GACA,IAAAiC,EAAAjH,EAAAgF,GACAmC,EAAAF,EAAAG,KAAA,UACAH,EAAAG,KAAA,WAEAxD,EAAAoC,SAAA0B,KAAAP,EAAAvD,EAAAT,QAAA/C,aASAmG,YAAA,SAAAJ,EAAAC,EAAAC,EAAAC,GACA,IAAAqB,EAAAlG,KAAAmG,iBAAAzB,GAEA0B,EAAAC,SAAAzB,EAAAC,EAAA,IAAA,IACAyB,EAAAtG,KAAAuG,YAAA3B,GAAA,OAAA5E,KAAAuG,YAAA1B,GAEAqB,EAAAP,KAAA,SAAA,WACAO,EAAAH,KAAA,aACAA,KAAA,QACAS,IAAA,QAAAJ,EAAA,KACAK,SACAV,KAAA,mBACAW,KAAAJ,GACAtG,KAAA2G,YAAAT,IAIAjB,YAAA,SAAAP,EAAAC,EAAAK,GACAhF,KAAA4G,mBACA,IAAAV,EAAAlG,KAAAmG,iBAAAzB,GACAwB,EAAAP,KAAA,SAAA,QACAO,EAAAH,KAAA,YAAAW,KAAA,iCAAA1G,KAAA6G,SAAA,aACA7G,KAAA2G,YAAAT,IAGAb,WAAA,SAAAX,EAAAC,EAAA1F,GACAe,KAAA4G,mBACA,IAAAV,EAAAlG,KAAAmG,iBAAAzB,GACAwB,EAAAP,KAAA,SAAA,SACAO,EAAAH,KAAA,YAAAW,KAAA,+BACA1G,KAAA2G,YAAAT,IAIAf,UAAA,SAAAT,EAAAC,GACA3E,KAAA4G,mBACA,IAAAV,EAAAlG,KAAAmG,iBAAAzB,GACAwB,EAAAP,KAAA,SAAA,UACA3F,KAAA2G,YAAAT,IAGAY,WAAA,SAAApC,EAAAC,GACA,IAGAA,EAAA3E,KAAAuE,SAAAwC,QAAArC,GACAsC,EAAAhH,KAAAuE,SAAA0C,QAAAvC,GAEA5E,EAAAvB,EAAAyB,KAAA0B,QAAA6B,SAAAE,UACA3D,EAAA6F,KAAA,SAAAjB,GAEA5E,EAAAiG,KAAA/F,KAAA0B,QAAA6B,SAAA5B,UAAAgC,MAAA+C,KAAA1G,KAAAkH,gBAAAvC,IACA7E,EAAAiG,KAAA/F,KAAA0B,QAAA6B,SAAA5B,UAAAiC,MAAA8C,KAAA1G,KAAAuG,YAAAS,IAEAhH,KAAAgC,MAAAzD,EAAAyB,KAAA0B,QAAAC,UAAA2B,UAAA6D,OAAArH,GAEAE,KAAAqE,mBAGAA,gBAAA,WACA,IAAA1C,EAAA3B,KAAA0B,QAAAC,UAEA3D,GADAgC,KAAA0B,QAAA6B,SAAA5B,UACA3B,KAAAgC,MAAAzD,EAAAoD,EAAA2B,UAAAyC,KAAApE,EAAA4B,WAEA6D,EAAApH,KAAAgC,MAAAzD,EAAAoD,EAAAE,cAAA,IAAAF,EAAAC,cACAyF,EAAArH,KAAAgC,MAAAzD,EAAAoD,EAAA6B,QACAxF,EAAAyB,OAAA,GACA2H,EAAA7H,YAAA,UACA8H,EAAA/H,SAAA,YAEA8H,EAAA9H,SAAA,UACA+H,EAAA9H,YAAA,YAIAoH,YAAA,SAAAT,GACA,IAAAvE,EAAA3B,KAAA0B,QAAA6B,SAAA5B,UACA2F,EAAApB,EAAAH,KAAApE,EAAAiC,KAAA,IAAAjC,EAAAkC,QACA0D,EAAArB,EAAAH,KAAApE,EAAAoC,SAAA,IAAApC,EAAAkC,QACA2D,EAAAtB,EAAAH,KAAApE,EAAAqC,QAAA,IAAArC,EAAAmC,OAEA2D,EAAAvB,EAAAP,KAAA,UACA,WAAA8B,GACAF,EAAAG,IAAAF,GAAAlI,SAAA,UACAgI,EAAA/H,YAAA,WACA,WAAAkI,GACAH,EAAAI,IAAAF,GAAAlI,SAAA,UACAiI,EAAAhI,YAAA,WACA,QAAAkI,GAAA,SAAAA,IACAH,EAAAI,IAAAH,GAAAjI,SAAA,UACAkI,EAAAjI,YAAA,YAIA4G,iBAAA,SAAAzB,GAQA,IAPA,IAEA5E,EAFA6B,EAAA3B,KAAA0B,QAAAC,UACA3D,EAAAgC,KAAAgC,MAAAzD,EAAAoD,EAAA2B,UAAAyC,KAAApE,EAAA4B,UAMAoE,EAAA,EAAAA,EAAA3J,EAAAyB,OAAAkI,IAAA,CACA,IAAAC,EAAA5J,EAAA2J,GACA,GAAApJ,EAAAqJ,GAAAjC,KAAA,WAAAjB,EAAA,CACA5E,EAAA8H,EACA,OAGA,GAAA9H,EACA,OAAAvB,EAAAuB,IAMAwE,UAAA,SAAAtG,GACA,IAAA,IAAA2J,EAAA,EAAAA,EAAA3J,EAAAyB,OAAAkI,IACA,IAAA3H,KAAA6H,cAAA7J,EAAA2J,IACA,OAIA,IAAA,IAAAA,EAAA,EAAAA,EAAA3J,EAAAyB,OAAAkI,IACA3H,KAAAuC,SAAAvE,EAAA2J,KAIApF,SAAA,SAAA1B,GACA,IAAA6D,EAAA1E,KAAAuE,SAAAmD,IAAA7G,GAEAb,KAAA4G,mBACA5G,KAAA8G,WAAApC,IAKAmD,cAAA,SAAAhH,GACA,IAAA8C,EAAAC,EAYA,OAVA/C,EAAAiH,MAGAnE,EAAA9C,EAAAiH,MAAAC,QAAA,YAAA,KAGApE,EAAA,MAAA9C,EAAA8D,SAAA9D,EAAA8D,SAAA9D,EAAA8C,KACAC,EAAA,MAAA/C,EAAAmG,SAAAnG,EAAAmG,SAAAnG,EAAA+C,MAGA5D,KAAAgI,oBAAArE,GAIA,IAAAC,GACA5D,KAAAiI,OAAA,aAAAtE,IACA,GAEAC,GAAA5D,KAAA0B,QAAAyB,WAAAS,EAAA5D,KAAA0B,QAAAyB,WACAnD,KAAAiI,OAAA,YAAAtE,IACA,KAEAC,GAAAA,EAAA5D,KAAA0B,QAAA0B,gBACApD,KAAAiI,OAAA,eAAAtE,IACA,IAbA3D,KAAAiI,OAAA,YAAAtE,IACA,IAkBAsE,OAAA,SAAAC,EAAAvD,GACA,IAAAX,EAAAhE,KAAA0B,QAAAyG,SAAAD,GACA,SAAAE,EAAAzE,EAAA0E,GAAArE,EAAAA,EAAA+D,QAAApE,EAAA0E,GAEAD,EAAA,SAAApI,KAAAkH,gBAAAvC,IACAyD,EAAA,eAAApI,KAAA0B,QAAAwB,kBAAAoF,KAAA,OACAF,EAAA,cAAApI,KAAAuG,YAAAvG,KAAA0B,QAAAyB,YACAiF,EAAA,iBAAApI,KAAAuG,YAAAvG,KAAA0B,QAAA0B,eAEApD,KAAA0B,QAAA6G,YAAAvE,IAGAkD,gBAAA,SAAAvD,GAIA,OAHAA,EAAAlE,OAAA,KACAkE,EAAAA,EAAA6E,MAAA,EAAA,IAAA,MAAA7E,EAAA6E,OAAA,KAEA7E,GAGAqE,oBAAA,SAAArD,GACA,IAAA8D,GAAA,IAAA9D,EAAAvF,QAAA,KAAAuF,EAAAoD,QAAA,QAAA,IAAAW,cAAA,GACAC,EAAA3I,KAAA0B,QAAAwB,kBAEA,IAAAyF,EAAAlJ,OAAA,OAAA,EAEA,IAAA,IAAAkI,EAAA,EAAAA,EAAAgB,EAAAlJ,OAAAkI,IACA,GAAAgB,EAAAhB,GAAAe,eAAAD,EAAA,OAAA,EAGA,OAAA,GAGAlC,YAAA,SAAAqC,GACA,IAAAjB,GAAA,EACA,GACAiB,GAAA,KACAjB,UACAiB,EAAA,IAEA,OAAAC,KAAAC,IAAAF,EAAA,IAAAG,QAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAApB,MASA,OAJAtG,EAAA2H,SAAAnG,GAIA7E,EAAA6E,cAAAA,IAEA/E,EAAA,2BACA,UACA,aACA,cACA,WACA,mBACA,mBACA,SAAAE,GACA,OAAAA,IAEAF,EAAA,sBAAA,2BAAA,SAAAmL,GAAA,OAAAA","file":"../skylark-domx-files.js","sourcesContent":["define('skylark-domx-files/files',[\r\n    \"skylark-langx/skylark\"\r\n], function(skylark) {\r\n\r\n    function dataURLtoBlob(dataurl) {\r\n        var arr = dataurl.split(','),\r\n            mime = arr[0].match(/:(.*?);/)[1],\r\n            bstr = atob(arr[1]),\r\n            n = bstr.length,\r\n            u8arr = new Uint8Array(n);\r\n        while (n--) {\r\n            u8arr[n] = bstr.charCodeAt(n);\r\n        }\r\n        return new Blob([u8arr], { type: mime });\r\n    }\r\n\r\n\r\n    var files = function() {\r\n        return files;\r\n    };\r\n\r\n    return skylark.attach(\"domx.files\", files);\r\n});\n  define('skylark-domx-files/dropzone',[\r\n    \"skylark-langx/arrays\",\r\n    \"skylark-langx/Deferred\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\",   \r\n    \"skylark-io-diskfs/webentry\",   \r\n    \"./files\"\r\n],function(arrays,Deferred, styler, eventer, velm, $, webentry, files){  /*\r\n     * Make the specified element to could accept HTML5 file drag and drop.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} params\r\n     */\r\n    function dropzone(elm, params) {\r\n        params = params || {};\r\n        var hoverClass = params.hoverClass || \"dropzone\",\r\n            droppedCallback = params.dropped;\r\n\r\n        var enterdCount = 0;\r\n        eventer.on(elm, \"dragenter\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\") > -1) {\r\n                eventer.stop(e);\r\n                enterdCount++;\r\n                styler.addClass(elm, hoverClass)\r\n            }\r\n        });\r\n\r\n        eventer.on(elm, \"dragover\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\") > -1) {\r\n                eventer.stop(e);\r\n            }\r\n        });\r\n\r\n        eventer.on(elm, \"dragleave\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\") > -1) {\r\n                enterdCount--\r\n                if (enterdCount == 0) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n            }\r\n        });\r\n\r\n        eventer.on(elm, \"drop\", function(e) {\r\n            if (e.dataTransfer && e.dataTransfer.types.indexOf(\"Files\") > -1) {\r\n                styler.removeClass(elm, hoverClass)\r\n                eventer.stop(e);\r\n                if (droppedCallback) {\r\n                    var items = e.dataTransfer.items;\r\n                    if (items && items.length && (items[0].webkitGetAsEntry ||\r\n                            items[0].getAsEntry)) {\r\n                        webentry.all(\r\n                            arrays.map(items, function(item) {\r\n                                if (item.webkitGetAsEntry) {\r\n                                    return item.webkitGetAsEntry();\r\n                                }\r\n                                return item.getAsEntry();\r\n                            })\r\n                        ).then(droppedCallback);\r\n                    } else {\r\n                        droppedCallback(e.dataTransfer.files);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return this;\r\n    }\r\n    files.dropzone = dropzone;\r\n\r\n    velm.delegate([\r\n        \"dropzone\"\r\n    ],files);\r\n\r\n\r\n    $.fn.dropzone = $.wraps.wrapper_every_act(files.dropzone, files);\r\n\r\n    return dropzone;\r\n});\ndefine('skylark-domx-files/pastezone',[\r\n    \"skylark-langx/objects\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\",   \r\n    \"./files\"\r\n],function(objects, eventer,velm,$, files){\r\n    function pastezone(elm, params) {\r\n        params = params || {};\r\n        var hoverClass = params.hoverClass || \"pastezone\",\r\n            pastedCallback = params.pasted;\r\n\r\n        eventer.on(elm, \"paste\", function(e) {\r\n            var items = e.originalEvent && e.originalEvent.clipboardData &&\r\n                e.originalEvent.clipboardData.items,\r\n                files = [];\r\n            if (items && items.length) {\r\n                objects.each(items, function(index, item) {\r\n                    var file = item.getAsFile && item.getAsFile();\r\n                    if (file) {\r\n                        files.push(file);\r\n                    }\r\n                });\r\n            }\r\n            if (pastedCallback && files.length) {\r\n                pastedCallback(files);\r\n            }\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    files.pastezone = pastezone;\r\n\r\n    velm.delegate([\r\n        \"pastezone\"\r\n    ],files);\r\n\r\n    $.fn.pastezone = $.wraps.wrapper_every_act(files.pastezone, files);\r\n\r\n    return pastezone;\r\n\r\n});\r\n\ndefine('skylark-domx-files/picker',[\r\n    \"skylark-langx/objects\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\",   \r\n    \"skylark-io-diskfs/select\",\r\n    \"./files\"\r\n],function(objects, eventer, velm, $, select, files){\r\n    /*\r\n     * Make the specified element to pop-up the file selection dialog box when clicked , and read the contents the files selected from client file system by user.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} params\r\n     */\r\n    function picker(elm, params) {\r\n        eventer.on(elm, \"click\", function(e) {\r\n            e.preventDefault();\r\n            select(params);\r\n        });\r\n        return this;\r\n    }\r\n\r\n    files.picker = picker;\r\n\r\n    velm.delegate([\r\n        \"picker\"\r\n    ],files);\r\n\r\n    $.fn.picker = $.wraps.wrapper_every_act(files.picker, files);\r\n\r\n    return picker;\r\n\r\n});\r\n\r\n\r\n\ndefine('skylark-domx-files/SingleUploader',[\r\n\t\"skylark-langx-emitter\",\r\n\t\"skylark-langx-async/Deferred\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-plugins\",\r\n\t\"./files\",\r\n\t\"./dropzone\",\r\n\t\"./pastezone\",\r\n\t\"./picker\"\r\n],function(\r\n\tEmitter, \r\n\tDeferred, \r\n\telmx,\r\n\tplugins,\r\n\tfiles\r\n) {\r\n\t//import ZipLoader from 'zip-loader';\r\n\r\n\t/**\r\n\t * Watches an element for file drops, parses to create a filemap hierarchy,\r\n\t * and emits the result.\r\n\t */\r\n\tclass SingleUploader extends plugins.Plugin {\r\n\t\tget klassName() {\r\n\t    \treturn \"SingleUploader\";\r\n    \t} \r\n\r\n    \tget pluginName(){\r\n      \t\treturn \"lark.singleuploader\";\r\n    \t} \r\n\r\n\t\tget options () {\r\n      \t\treturn {\r\n\t            selectors : {\r\n\t              picker   : \".file-picker\",\r\n\t              dropzone : \".file-dropzone\",\r\n\t              pastezone: \".file-pastezone\",\r\n\r\n\t              startUploads: '.start-uploads',\r\n\t              cancelUploads: '.cancel-uploads',\r\n\t            }\r\n\t     \t}\r\n\t\t}\r\n\r\n\r\n\t  /**\r\n\t   * @param  {Element} elm\r\n\t   * @param  [options] \r\n\t   */\r\n\t  constructor (elm, options) {\r\n\t  \tsuper(elm,options);\r\n\r\n        this._velm = elmx(this._elm);\r\n\r\n\t  \tthis._initFileHandlers();\r\n\r\n\t}\r\n\r\n    _initFileHandlers () {\r\n        var self = this;\r\n\r\n        var selectors = this.options.selectors,\r\n        \tdzSelector = selectors.dropzone,\r\n        \tpzSelector = selectors.pastezone,\r\n        \tpkSelector = selectors.picker;\r\n\r\n        if (dzSelector) {\r\n\t\t\tthis._velm.$(dzSelector).dropzone({\r\n                dropped : function (files) {\r\n                    self._addFile(files[0]);\r\n                }\r\n\t\t\t});\r\n        }\r\n\r\n\r\n        if (pzSelector) {\r\n            this._velm.$(pzSelector).pastezone({\r\n                pasted : function (files) {\r\n                    self._addFile(files[0]);\r\n                }\r\n            });                \r\n        }\r\n\r\n        if (pkSelector) {\r\n            this._velm.$(pkSelector).picker({\r\n                multiple: true,\r\n                picked : function (files) {\r\n                    self._addFile(files[0]);\r\n                }\r\n            });                \r\n        }\r\n    }\r\n\r\n     _addFile(file) {\r\n        this.emit('added', file);\t  \r\n     }\r\n\r\n\r\n\t  /**\r\n\t   * Destroys the instance.\r\n\t   */\r\n\t  destroy () {\r\n\t  }\r\n\r\n\r\n\t}\r\n\r\n\treturn files.SingleUploader = SingleUploader;\r\n\r\n});\r\n\r\n \ndefine('skylark-domx-files/MultiUploader',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-net-http/Upload\",\r\n  \"skylark-domx-plugins\",\r\n  \"./files\"\r\n]  ,function(skylark,langx,$, elmx,FileUpload, plugins,files){\r\n\r\n    var fileListTemplate = '<div class=\"lark-multiuploader\">' + \r\n        '    <h3 class=\"popover-title\">Upload files</h3>' + \r\n        '    <div class=\"popover-content container-fluid\" class=\"file-list file-dropzone file-pastezone\">' + \r\n        '        <div class=\"no-data\"><em>Add files.</em></div>' + \r\n        '    </div>' + \r\n        '    <footer>' + \r\n        '        <button class=\"btn btn-warning pull-right btn-sm\" id=\"cancel-uploads-button\"><i class=\"icon-cancel\"></i>Cancel uploads</button>' + \r\n        '        <span class=\"btn btn-success fileinput-button btn-sm\" id=\"fileinput-button\">' + \r\n        '            <i class=\"icon-plus\"></i>' + \r\n        '            <span>Add files...</span>' + \r\n        '            <input id=\"fileupload\" type=\"file\" name=\"files[]\" multiple=\"multiple\">' + \r\n        '        </span>' + \r\n        '        <button class=\"btn btn-primary btn-sm\" id=\"start-uploads-button\"><i class=\"icon-start\"></i>Start uploads</button>' + \r\n        '    </footer>' + \r\n        '</div>',\r\n        fileItemTemplate = '<div class=\"file-item row\">' +\r\n        '   <div class=\"col-md-6\"><span class=\"name\"></span></div>' + \r\n        '   <div class=\"col-md-3\">' +\r\n        '    <span class=\"size\"></span>' +\r\n        '    <div class=\"progress hidden\">' +\r\n        '        <div class=\"progress-label\"></div>' +\r\n        '        <div class=\"bar\"></div>' +\r\n        '    </div>' +\r\n        '    <span class=\"message hidden\"></span>' +\r\n        '   </div>' +\r\n        '   <div class=\"col-md-3\">' +\r\n        '    <button class=\"btn btn-warning btn-xs cancel\"><i class=\"icon-remove\"></i>Cancel</button>' +\r\n        '    <button class=\"btn btn-xs clear hidden\">Clear</button>' +\r\n        '   </div>' +\r\n        '</div>';\r\n\r\n    var MultiUploader =  plugins.Plugin.inherit({\r\n        klassName : \"Uploader\",\r\n        pluginName : \"lark.multiuploader\",\r\n\r\n        options: {\r\n            uploadUrl: '/upload',\r\n\r\n        \tparams: {\r\n                formParamName : \"file\"\r\n            },\r\n\r\n    \t    maxConnections: 3,\r\n        \t// validation\r\n        \tallowedExtensions: [],\r\n        \tsizeLimit: 0,\r\n        \tminSizeLimit: 0,\r\n\r\n            autoUpload: false,\r\n            selectors : {\r\n              fileList : \".file-list\",\r\n              fileItem : \".file-item\",\r\n              nodata : \".file-list .no-data\",\r\n\r\n              picker   : \".file-picker\",\r\n              dropzone : \".file-dropzone\",\r\n              pastezone: \".file-pastezone\",\r\n\r\n              startUploads: '.start-uploads',\r\n              cancelUploads: '.cancel-uploads',\r\n            },\r\n\r\n            template : fileListTemplate,\r\n\r\n            dataType: 'json',\r\n\r\n            fileItem : {\r\n            \tselectors : {\r\n                    name : \".name\",\r\n                    size : \".size\",\r\n                    cancel: \".cancel\",\r\n                    clear : \".clear\",\r\n                    progress : \".progress\",\r\n                    message : \".message\"                   \r\n            \t},\r\n\r\n            \ttemplate : fileItemTemplate\r\n            }\r\n        },\r\n\r\n\r\n        _construct : function(elm,options) {\r\n            var self = this;\r\n\r\n\r\n            // Render current files\r\n            /*\r\n            this.files.forEach(function (file) {\r\n                self.renderFile(file);\r\n            });\r\n            */\r\n\r\n            //this._refresh({files:true});\r\n        \r\n\r\n            //this._files.on('all', function(){\r\n            //  self._refresh({files:true});\r\n            //});\r\n\r\n\r\n           this.overrided(elm,options);\r\n\r\n\r\n           this._velm = elmx(this._elm);\r\n        \r\n\r\n\r\n            this._initEventHandler();\r\n            this._initFileHandlers();\r\n            this._initUpoadHandler();\r\n            this._updateFileList();\r\n        },\r\n\r\n        _initFileHandlers : function() {\r\n            var self = this;\r\n\r\n            var selectors = this.options.selectors,\r\n            \tdzSelector = selectors.dropzone,\r\n            \tpzSelector = selectors.pastezone,\r\n            \tpkSelector = selectors.picker;\r\n\r\n            if (dzSelector) {\r\n\t\t\t\tthis._velm.$(dzSelector).dropzone({\r\n\t                dropped : function (files) {\r\n                        self._addFiles(files);\r\n\t                }\r\n\t\t\t\t});\r\n            }\r\n\r\n\r\n            if (pzSelector) {\r\n                this._velm.$(pzSelector).pastezone({\r\n                    pasted : function (files) {\r\n                        self._addFiles(files);\r\n                    }\r\n                });                \r\n            }\r\n\r\n            if (pkSelector) {\r\n                this._velm.$(pkSelector).picker({\r\n                    multiple: true,\r\n                    picked : function (files) {\r\n                        self._addFiles(files);\r\n                    }\r\n                });                \r\n            }\r\n        },\r\n\r\n        _initUpoadHandler: function(){\r\n            var self = this,\r\n                handlerClass;\r\n\r\n            this._handler = new FileUpload({\r\n                url: this.options.uploadUrl,\r\n                maxConnections: this.options.maxConnections,\r\n                onProgress: function(id, fileName, loaded, total){\r\n                    self._onProgress(id, fileName, loaded, total);\r\n                },\r\n                onComplete: function(id, fileName, result){\r\n                    self._onComplete(id, fileName, result);\r\n                },\r\n                onCancel: function(id, fileName){\r\n                    self._onCancel(id, fileName);\r\n                },\r\n                onFailure: function(id,fileName,e){\r\n                    self._onFailure(id,fileName,e);\r\n                }\r\n            });\r\n        },\r\n        \r\n         /**\r\n         * delegate click event for cancel link\r\n         **/\r\n        _initEventHandler: function(){\r\n            var self = this,\r\n               selectors = this.options.selectors,\r\n               itemSelectors = this.options.fileItem.selectors, \r\n               list = this._listElement;\r\n\r\n            // Add cancel handler\r\n            this._velm.$(selectors.fileList).on(\"click\",itemSelectors.cancel,function(e){\r\n                var $fileItem = $(this).closest(selectors.fileItem),\r\n                    fileId = $fileItem.data(\"fileId\");\r\n                self._handler.cancel(fileId);\r\n                $fileItem.remove();\r\n                self._updateFileList();\r\n            });\r\n\r\n            // Add clear handler\r\n            this._velm.$(selectors.fileList).on(\"click\",itemSelectors.clear,function(e){\r\n                var $fileItem = $(this).closest(selectors.fileItem),\r\n                    fileId = $fileItem.data(\"fileId\");\r\n                $fileItem.remove();\r\n                self._updateFileList();\r\n            });\r\n\r\n            // Add cancel all handler\r\n            this._velm.$(selectors.cancelUploads).click(function(){\r\n                var $files = self._velm.$(selectors.fileList).find(selectors.fileItem);           \r\n                $files.forEach(function(fileItem){\r\n                    var $fileItem = $(fileItem),\r\n                        fileId = $fileItem.data(\"fileId\");\r\n                    self._handler.cancel(fileId);\r\n                    $fileItem.remove();\r\n                });\r\n                self._updateFileList();\r\n\r\n            });\r\n\r\n            // Add start uploads handler\r\n            this._velm.$(selectors.startUploads).click(function(){\r\n                var $files = self._velm.$(selectors.fileList).find(selectors.fileItem);           \r\n                $files.forEach(function(fileItem){\r\n                    var $fileItem = $(fileItem),\r\n                        fileId = $fileItem.data(\"fileId\");\r\n                    if (!$fileItem.data(\"status\")) {\r\n                        // The file has not yet been sent\r\n                        self._handler.send(fileId,self.options.params);\r\n                    }\r\n                });\r\n\r\n            });\r\n            \r\n\r\n        },       \r\n\r\n        _onProgress: function(id, fileName, loaded, total){          \r\n            var $item = this._getItemByFileId(id);\r\n\r\n            var percent = parseInt(loaded / total * 100, 10);\r\n            var progressHTML = this._formatSize(loaded)+' of '+ this._formatSize(total);\r\n\r\n            $item.data(\"status\",\"running\");\r\n            $item.find('.progress')\r\n                .find('.bar')\r\n                .css('width', percent+'%')\r\n                .parent()\r\n                .find('.progress-label')\r\n                .html(progressHTML);\r\n            this._updateFile($item);\r\n\r\n        },\r\n\r\n        _onComplete: function(id, fileName, result){\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"done\");\r\n            $item.find('.message').html('<i class=\"icon-success\"></i> ' + (this.doneMsg || 'Uploaded'));\r\n            this._updateFile($item);\r\n        },\r\n\r\n        _onFailure : function(id,fileName,e) {\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"error\");\r\n            $item.find('.message').html('<i class=\"icon-error\"></i> ');;\r\n            this._updateFile($item)\r\n\r\n        },\r\n\r\n        _onCancel: function(id, fileName){\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"cancel\");\r\n            this._updateFile($item)\r\n        },\r\n\r\n        _addToList: function(id, fileName){\r\n            var self = this;\r\n\r\n\r\n            var fileName = this._handler.getName(id),\r\n                fileSize = this._handler.getSize(id);\r\n\r\n            var item = $(this.options.fileItem.template);\r\n            item.data(\"fileId\",id);\r\n\r\n            item.find(this.options.fileItem.selectors.name).html(this._formatFileName(fileName));\r\n            item.find(this.options.fileItem.selectors.size).html(this._formatSize(fileSize));\r\n\r\n            this._velm.$(this.options.selectors.fileList).append(item);\r\n\r\n            this._updateFileList();\r\n        },\r\n    \r\n        _updateFileList : function ()  {\r\n            var selectors = this.options.selectors,\r\n                itemSelectors = this.options.fileItem.selectors,\r\n                files = this._velm.$(selectors.fileList).find(selectors.fileItem);\r\n\r\n            var with_files_elements = this._velm.$(selectors.cancelUploads + ',' + selectors.startUploads);\r\n            var without_files_elements = this._velm.$(selectors.nodata);\r\n            if (files.length > 0) {\r\n                with_files_elements.removeClass('hidden');\r\n                without_files_elements.addClass('hidden');\r\n            } else {\r\n                with_files_elements.addClass('hidden');\r\n                without_files_elements.removeClass('hidden');\r\n            }\r\n        },\r\n        \r\n        _updateFile: function ($item) {\r\n            var selectors = this.options.fileItem.selectors,\r\n                when_pending = $item.find(selectors.size + \",\" + selectors.cancel),\r\n                when_running = $item.find(selectors.progress + \",\" + selectors.cancel),\r\n                when_done = $item.find(selectors.message + \",\" + selectors.clear);\r\n\r\n            var status = $item.data(\"status\");    \r\n            if (status == \"pending\") {\r\n                when_running.add(when_done).addClass('hidden');\r\n                when_pending.removeClass('hidden');\r\n            } else if (status == \"running\") {\r\n                when_pending.add(when_done).addClass('hidden');\r\n                when_running.removeClass('hidden');\r\n            } else if (status == \"done\" || status == \"error\") {\r\n                when_pending.add(when_running).addClass('hidden');\r\n                when_done.removeClass('hidden');\r\n            }\r\n        },\r\n\r\n        _getItemByFileId: function(id){\r\n            var selectors = this.options.selectors,\r\n                files = this._velm.$(selectors.fileList).find(selectors.fileItem),\r\n                item;\r\n\r\n            // there can't be txt nodes in dynamically created list\r\n            // and we can  use nextSibling\r\n\r\n            for (var i = 0; i<files.length;i++){\r\n                var item2 = files[i];\r\n                if ($(item2).data(\"fileId\") == id) {\r\n                    item = item2;\r\n                    break;\r\n                }\r\n            }\r\n            if (item) {\r\n                return $(item);\r\n            }\r\n        },\r\n\r\n\r\n            \r\n        _addFiles: function(files){\r\n            for (var i=0; i<files.length; i++){\r\n                if ( !this._validateFile(files[i])){\r\n                    return;\r\n                }\r\n            }\r\n\r\n            for (var i=0; i<files.length; i++){\r\n                this._addFile(files[i]);\r\n            }\r\n        },\r\n\r\n        _addFile: function(file){\r\n            var id = this._handler.add(file);\r\n\r\n            this._filesInProgress++;\r\n            this._addToList(id);\r\n\r\n            //this._handler.upload(id, this.options.params);\r\n        },\r\n\r\n        _validateFile: function(file){\r\n            var name, size;\r\n\r\n            if (file.value){\r\n                // it is a file input\r\n                // get input value and remove path to normalize\r\n                name = file.value.replace(/.*(\\/|\\\\)/, \"\");\r\n            } else {\r\n                // fix missing properties in Safari\r\n                name = file.fileName != null ? file.fileName : file.name;\r\n                size = file.fileSize != null ? file.fileSize : file.size;\r\n            }\r\n\r\n            if (! this._isAllowedExtension(name)){\r\n                this._error('typeError', name);\r\n                return false;\r\n\r\n            } else if (size === 0){\r\n                this._error('emptyError', name);\r\n                return false;\r\n\r\n            } else if (size && this.options.sizeLimit && size > this.options.sizeLimit){\r\n                this._error('sizeError', name);\r\n                return false;\r\n\r\n            } else if (size && size < this.options.minSizeLimit){\r\n                this._error('minSizeError', name);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _error: function(code, fileName){\r\n            var message = this.options.messages[code];\r\n            function r(name, replacement){ message = message.replace(name, replacement); }\r\n\r\n            r('{file}', this._formatFileName(fileName));\r\n            r('{extensions}', this.options.allowedExtensions.join(', '));\r\n            r('{sizeLimit}', this._formatSize(this.options.sizeLimit));\r\n            r('{minSizeLimit}', this._formatSize(this.options.minSizeLimit));\r\n\r\n            this.options.showMessage(message);\r\n        },\r\n\r\n        _formatFileName: function(name){\r\n            if (name.length > 33){\r\n                name = name.slice(0, 19) + '...' + name.slice(-13);\r\n            }\r\n            return name;\r\n        },\r\n\r\n        _isAllowedExtension: function(fileName){\r\n            var ext = (-1 !== fileName.indexOf('.')) ? fileName.replace(/.*[.]/, '').toLowerCase() : '';\r\n            var allowed = this.options.allowedExtensions;\r\n\r\n            if (!allowed.length){return true;}\r\n\r\n            for (var i=0; i<allowed.length; i++){\r\n                if (allowed[i].toLowerCase() == ext){ return true;}\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _formatSize: function(bytes){\r\n            var i = -1;\r\n            do {\r\n                bytes = bytes / 1024;\r\n                i++;\r\n            } while (bytes > 99);\r\n\r\n            return Math.max(bytes, 0.1).toFixed(1) + ['KB', 'MB', 'GB', 'TB', 'PB', 'EB'][i];\r\n        }\r\n\r\n    });\r\n\r\n   plugins.register(MultiUploader);\r\n\r\n\r\n\r\n\treturn files.MultiUploader = MultiUploader;\r\n});\ndefine('skylark-domx-files/main',[\r\n\t\"./files\",\r\n\t\"./dropzone\",\r\n\t\"./pastezone\",\r\n\t\"./picker\",\r\n\t\"./SingleUploader\",\r\n\t\"./MultiUploader\"\r\n],function(files){\r\n\treturn files;\r\n});\ndefine('skylark-domx-files', ['skylark-domx-files/main'], function (main) { return main; });\n\n"]}